{"title":"Haar 特征分类器实现人脸识别","uid":"dc76bdb116b22b7d8e614c5e499a6c3f","slug":"基于OpenCV 的 Haar 特征分类器实现人脸检测与显示","date":"2024-08-24T06:37:38.807Z","updated":"2024-08-25T01:19:34.394Z","comments":true,"path":"api/articles/基于OpenCV 的 Haar 特征分类器实现人脸检测与显示.json","keywords":null,"cover":"https://ogre.natalie.mu/media/news/music/2024/0306/ILLIT0306_all1.jpg?impolicy=twitter_card_face_crop","content":"<h1 id=\"基于OpenCV-的-Haar-特征分类器实现人脸检测与显示\"><a href=\"#基于OpenCV-的-Haar-特征分类器实现人脸检测与显示\" class=\"headerlink\" title=\"基于OpenCV 的 Haar 特征分类器实现人脸检测与显示\"></a>基于OpenCV 的 Haar 特征分类器实现人脸检测与显示</h1><p>在计算机视觉领域，人脸检测是非常基础而且常用的技术，最近刚好在学计算机视觉的相关知识，学到人脸识别时，感到比较有趣</p>\n<p>于是简单写一下我的实现过程。[]<del>(￣▽￣)</del>*</p>\n<p>本文将展示如何使用 OpenCV 和 Python 来实现简单的人脸检测，并使用 Matplotlib 对结果进行可视化。</p>\n<h2 id=\"1-环境配置\"><a href=\"#1-环境配置\" class=\"headerlink\" title=\"1. 环境配置\"></a>1. 环境配置</h2><p>首先，我们需要确保已安装必要的库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install opencv-python matplotlib</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-代码实现\"><a href=\"#2-代码实现\" class=\"headerlink\" title=\"2. 代码实现\"></a>2. 代码实现</h2><p>代码分为几个关键部分：图像的读取与处理、人脸检测、绘制矩形框以及结果显示。</p>\n<h3 id=\"2-1-导入所需的库\"><a href=\"#2-1-导入所需的库\" class=\"headerlink\" title=\"2.1. 导入所需的库\"></a>2.1. 导入所需的库</h3><p>我们首先导入 OpenCV 和 Matplotlib，用于图像处理和结果显示。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-定义显示图像的函数\"><a href=\"#2-2-定义显示图像的函数\" class=\"headerlink\" title=\"2.2. 定义显示图像的函数\"></a>2.2. 定义显示图像的函数</h3><p>为了更好地展示图像，我定义了一个 <code>show_img</code> 函数，将 BGR 格式的图像转换为 RGB 格式，并用 Matplotlib 显示出来。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show_img</span>(<span class=\"params\">img, title, pos</span>):</span><br><span class=\"line\">    img_RGB = img[:, :, ::-<span class=\"number\">1</span>]  <span class=\"comment\"># BGR 转 RGB</span></span><br><span class=\"line\">    plt.subplot(<span class=\"number\">2</span>, <span class=\"number\">2</span>, pos)</span><br><span class=\"line\">    plt.title(title)</span><br><span class=\"line\">    plt.imshow(img_RGB)</span><br><span class=\"line\">    plt.xticks([])  <span class=\"comment\"># 隐藏 x 轴刻度</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-绘制人脸矩形框的函数\"><a href=\"#2-3-绘制人脸矩形框的函数\" class=\"headerlink\" title=\"2.3. 绘制人脸矩形框的函数\"></a>2.3. 绘制人脸矩形框的函数</h3><p><code>plot_rectangle</code> 函数用于在人脸检测结果中绘制矩形框：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">plot_rectangle</span>(<span class=\"params\">img, faces</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (x, y, w, h) <span class=\"keyword\">in</span> faces:</span><br><span class=\"line\">        cv2.rectangle(img, (x, y), (x + w, y + h), (<span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>), <span class=\"number\">2</span>)  <span class=\"comment\"># 绘制黄色矩形框</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> img</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-4-主程序\"><a href=\"#2-4-主程序\" class=\"headerlink\" title=\"2.4. 主程序\"></a>2.4. 主程序</h3><p>主程序中，我们加载图像、转换为灰度图，并使用 OpenCV 的 Haar 特征分类器进行人脸检测。最后，绘制检测到的人脸并显示图像。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    image = cv2.imread(<span class=\"string\">&quot;../resources/tg009.jpg&quot;</span>)  <span class=\"comment\"># 读取图像</span></span><br><span class=\"line\">    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)  <span class=\"comment\"># 转为灰度图</span></span><br><span class=\"line\">    face_cascade = cv2.CascadeClassifier(<span class=\"string\">&quot;haarcascade_frontalface_alt.xml&quot;</span>)  <span class=\"comment\"># 加载分类器</span></span><br><span class=\"line\">    faces = face_cascade.detectMultiScale(gray)  <span class=\"comment\"># 人脸检测</span></span><br><span class=\"line\"></span><br><span class=\"line\">    face_alt2 = plot_rectangle(image.copy(), faces)  <span class=\"comment\"># 绘制矩形框</span></span><br><span class=\"line\">    plt.figure(figsize=(<span class=\"number\">10</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\">    plt.suptitle(<span class=\"string\">&quot;Face Detection&quot;</span>, fontsize=<span class=\"number\">14</span>, fontweight=<span class=\"string\">&quot;bold&quot;</span>)</span><br><span class=\"line\">    show_img(face_alt2, <span class=\"string\">&quot;face_alt2&quot;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    plt.show()</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>上面代码值得注意的是,haarcascade_frontalface_alt2.xml分类器我是从opencv源码里面复制的，  还有其他几种分类器可以用:</p></blockquote>\n<p><img src=\"/images%5Cimage-20240824144339886.png\" alt=\"image-20240824144339886\"></p>\n<p>代码的运行效果如图所示：检测到的人脸区域被黄色矩形框标出，结果被显示在 Matplotlib 窗口中。</p>\n<p><img src=\"/%5Cimages%5Cimage-20240824145037467.png\" alt=\"image-20240824145037467\"></p>\n<h2 id=\"3-运行结果分析\"><a href=\"#3-运行结果分析\" class=\"headerlink\" title=\"3. 运行结果分析\"></a>3. 运行结果分析</h2><p>可以看到，最后效果并不是那么好，因为这个算法是比较老的了，现在利用深度学习的算法能做到非常精准，因此本方法了解一下就行。</p>\n<h2 id=\"4-结论\"><a href=\"#4-结论\" class=\"headerlink\" title=\"4. 结论\"></a>4. 结论</h2><p>本篇文章展示了如何使用 Python 和 OpenCV 实现人脸检测，以及如何利用 Matplotlib 对结果进行可视化。在实际项目中，人脸检测可以被应用于多种场景，如监控系统、智能门禁和人脸识别考勤等。</p>\n","feature":false,"text":"基于OpenCV 的 Haar 特征分类器实现人脸检测与显示在计算机视觉领域，人脸检测是非常基础而且常用的技术，最近刚好在学计算机视觉的相关知识，学到人脸识别时...","permalink":"/post/基于OpenCV 的 Haar 特征分类器实现人脸检测与显示","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"计算机视觉","slug":"计算机视觉","count":1,"path":"api/categories/计算机视觉.json"}],"tags":[{"name":"OpenCV","slug":"OpenCV","count":1,"path":"api/tags/OpenCV.json"},{"name":"人脸识别","slug":"人脸识别","count":1,"path":"api/tags/人脸识别.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8EOpenCV-%E7%9A%84-Haar-%E7%89%B9%E5%BE%81%E5%88%86%E7%B1%BB%E5%99%A8%E5%AE%9E%E7%8E%B0%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B%E4%B8%8E%E6%98%BE%E7%A4%BA\"><span class=\"toc-text\">基于OpenCV 的 Haar 特征分类器实现人脸检测与显示</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">1. 环境配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">2. 代码实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E5%AF%BC%E5%85%A5%E6%89%80%E9%9C%80%E7%9A%84%E5%BA%93\"><span class=\"toc-text\">2.1. 导入所需的库</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E5%AE%9A%E4%B9%89%E6%98%BE%E7%A4%BA%E5%9B%BE%E5%83%8F%E7%9A%84%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">2.2. 定义显示图像的函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-%E7%BB%98%E5%88%B6%E4%BA%BA%E8%84%B8%E7%9F%A9%E5%BD%A2%E6%A1%86%E7%9A%84%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">2.3. 绘制人脸矩形框的函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-%E4%B8%BB%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">2.4. 主程序</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C%E5%88%86%E6%9E%90\"><span class=\"toc-text\">3. 运行结果分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E7%BB%93%E8%AE%BA\"><span class=\"toc-text\">4. 结论</span></a></li></ol></li></ol>","author":{"name":"神秘奇男子","slug":"blog-author","avatar":"https://i.ibb.co/b3C0QpT/584-2022101195826670.jpg","link":"/","description":"一位旨在梳理所学、分享个人经验的入门级菜坤","socials":{"github":"https://github.com/August618?tab=repositories","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/august121wsy","csdn":"https://blog.csdn.net/UPCAUG?spm=1011.2124.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/1931947622/favlist?fid=1765359122"},"Gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/wu-shanyu-AUG"}}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"Welcome to AUG's Blog","uid":"3ceded50fe0dd372bcf8c1a5f8350431","slug":"hello-world","date":"2024-08-21T13:16:45.064Z","updated":"2024-08-24T06:23:45.803Z","comments":true,"path":"api/articles/hello-world.json","keywords":null,"cover":"https://shp.qpic.cn/ishow/2735062818/1719569941_829394697_32271_sProdImgNo_2.jpg/0","text":" Hello,你们好！（づ￣3￣）づ╭❤️～欢迎来到我的博客我会不定期持续更新文章,欢迎大家批评指正","permalink":"/post/hello-world","photos":[],"count_time":{"symbolsCount":50,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"博客简介","slug":"博客简介","count":1,"path":"api/tags/博客简介.json"}],"author":{"name":"神秘奇男子","slug":"blog-author","avatar":"https://i.ibb.co/b3C0QpT/584-2022101195826670.jpg","link":"/","description":"一位旨在梳理所学、分享个人经验的入门级菜坤","socials":{"github":"https://github.com/August618?tab=repositories","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/august121wsy","csdn":"https://blog.csdn.net/UPCAUG?spm=1011.2124.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/1931947622/favlist?fid=1765359122"},"Gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/wu-shanyu-AUG"}}}}}}