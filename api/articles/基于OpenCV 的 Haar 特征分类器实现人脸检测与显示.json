{"title":"Haar 特征分类器实现人脸识别","uid":"dc76bdb116b22b7d8e614c5e499a6c3f","slug":"基于OpenCV 的 Haar 特征分类器实现人脸检测与显示","date":"2024-08-24T06:37:38.807Z","updated":"2024-09-06T13:47:27.165Z","comments":true,"path":"api/articles/基于OpenCV 的 Haar 特征分类器实现人脸检测与显示.json","keywords":null,"cover":"https://ogre.natalie.mu/media/news/music/2024/0306/ILLIT0306_all1.jpg?impolicy=twitter_card_face_crop","content":"<h1 id=\"基于OpenCV-的-Haar-特征分类器实现人脸检测与显示\"><a href=\"#基于OpenCV-的-Haar-特征分类器实现人脸检测与显示\" class=\"headerlink\" title=\"基于OpenCV 的 Haar 特征分类器实现人脸检测与显示\"></a>基于OpenCV 的 Haar 特征分类器实现人脸检测与显示</h1><p>在计算机视觉领域，人脸检测是非常基础而且常用的技术，最近刚好在学计算机视觉的相关知识，学到人脸识别时，感到比较有趣</p>\n<p>于是简单写一下我的实现过程。[]<del>(￣▽￣)</del>*</p>\n<p>本文将展示如何使用 OpenCV 和 Python 来实现简单的人脸检测，并使用 Matplotlib 对结果进行可视化。</p>\n<h2 id=\"1-环境配置\"><a href=\"#1-环境配置\" class=\"headerlink\" title=\"1. 环境配置\"></a>1. 环境配置</h2><p>首先，我们需要确保已安装必要的库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install opencv-python matplotlib</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-代码实现\"><a href=\"#2-代码实现\" class=\"headerlink\" title=\"2. 代码实现\"></a>2. 代码实现</h2><p>代码分为几个关键部分：图像的读取与处理、人脸检测、绘制矩形框以及结果显示。</p>\n<h3 id=\"2-1-导入所需的库\"><a href=\"#2-1-导入所需的库\" class=\"headerlink\" title=\"2.1. 导入所需的库\"></a>2.1. 导入所需的库</h3><p>我们首先导入 OpenCV 和 Matplotlib，用于图像处理和结果显示。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-定义显示图像的函数\"><a href=\"#2-2-定义显示图像的函数\" class=\"headerlink\" title=\"2.2. 定义显示图像的函数\"></a>2.2. 定义显示图像的函数</h3><p>为了更好地展示图像，我定义了一个 <code>show_img</code> 函数，将 BGR 格式的图像转换为 RGB 格式，并用 Matplotlib 显示出来。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show_img</span>(<span class=\"params\">img, title, pos</span>):</span><br><span class=\"line\">    img_RGB = img[:, :, ::-<span class=\"number\">1</span>]  <span class=\"comment\"># BGR 转 RGB</span></span><br><span class=\"line\">    plt.subplot(<span class=\"number\">2</span>, <span class=\"number\">2</span>, pos)</span><br><span class=\"line\">    plt.title(title)</span><br><span class=\"line\">    plt.imshow(img_RGB)</span><br><span class=\"line\">    plt.xticks([])  <span class=\"comment\"># 隐藏 x 轴刻度</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-绘制人脸矩形框的函数\"><a href=\"#2-3-绘制人脸矩形框的函数\" class=\"headerlink\" title=\"2.3. 绘制人脸矩形框的函数\"></a>2.3. 绘制人脸矩形框的函数</h3><p><code>plot_rectangle</code> 函数用于在人脸检测结果中绘制矩形框：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">plot_rectangle</span>(<span class=\"params\">img, faces</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (x, y, w, h) <span class=\"keyword\">in</span> faces:</span><br><span class=\"line\">        cv2.rectangle(img, (x, y), (x + w, y + h), (<span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>), <span class=\"number\">2</span>)  <span class=\"comment\"># 绘制黄色矩形框</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> img</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-4-主程序\"><a href=\"#2-4-主程序\" class=\"headerlink\" title=\"2.4. 主程序\"></a>2.4. 主程序</h3><p>主程序中，我们加载图像、转换为灰度图，并使用 OpenCV 的 Haar 特征分类器进行人脸检测。最后，绘制检测到的人脸并显示图像。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    image = cv2.imread(<span class=\"string\">&quot;../resources/tg009.jpg&quot;</span>)  <span class=\"comment\"># 读取图像</span></span><br><span class=\"line\">    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)  <span class=\"comment\"># 转为灰度图</span></span><br><span class=\"line\">    face_cascade = cv2.CascadeClassifier(<span class=\"string\">&quot;haarcascade_frontalface_alt.xml&quot;</span>)  <span class=\"comment\"># 加载分类器</span></span><br><span class=\"line\">    faces = face_cascade.detectMultiScale(gray)  <span class=\"comment\"># 人脸检测</span></span><br><span class=\"line\"></span><br><span class=\"line\">    face_alt2 = plot_rectangle(image.copy(), faces)  <span class=\"comment\"># 绘制矩形框</span></span><br><span class=\"line\">    plt.figure(figsize=(<span class=\"number\">10</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\">    plt.suptitle(<span class=\"string\">&quot;Face Detection&quot;</span>, fontsize=<span class=\"number\">14</span>, fontweight=<span class=\"string\">&quot;bold&quot;</span>)</span><br><span class=\"line\">    show_img(face_alt2, <span class=\"string\">&quot;face_alt2&quot;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    plt.show()</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">WARNING</p>\n<p>上面代码值得注意的是,haarcascade_frontalface_alt2.xml分类器我是从opencv源码里面复制的，  还有其他几种分类器可以用:</p>\n</div>\n<p><img src=\"/images/image-20240824144339886.png\" alt=\"image-20240824144339886\"></p>\n<p>代码的运行效果如图所示：检测到的人脸区域被黄色矩形框标出，结果被显示在 Matplotlib 窗口中。</p>\n<p><img src=\"/images/image-20240824145037467.png\" alt=\"image-20240824145037467\"></p>\n<h2 id=\"3-运行结果分析\"><a href=\"#3-运行结果分析\" class=\"headerlink\" title=\"3. 运行结果分析\"></a>3. 运行结果分析</h2><p>可以看到，最后效果并不是那么好，因为这个算法是比较老的了，现在利用深度学习的算法能做到非常精准，因此本方法了解一下就行。</p>\n<h2 id=\"4-结论\"><a href=\"#4-结论\" class=\"headerlink\" title=\"4. 结论\"></a>4. 结论</h2><p>本篇文章展示了如何使用 Python 和 OpenCV 实现人脸检测，以及如何利用 Matplotlib 对结果进行可视化。在实际项目中，人脸检测可以被应用于多种场景，如监控系统、智能门禁和人脸识别考勤等。</p>\n","feature":true,"text":"基于OpenCV 的 Haar 特征分类器实现人脸检测与显示在计算机视觉领域，人脸检测是非常基础而且常用的技术，最近刚好在学计算机视觉的相关知识，学到人脸识别时...","permalink":"/post/基于OpenCV 的 Haar 特征分类器实现人脸检测与显示","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"计算机视觉","slug":"计算机视觉","count":1,"path":"api/categories/计算机视觉.json"}],"tags":[{"name":"OpenCV","slug":"OpenCV","count":1,"path":"api/tags/OpenCV.json"},{"name":"人脸识别","slug":"人脸识别","count":1,"path":"api/tags/人脸识别.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8EOpenCV-%E7%9A%84-Haar-%E7%89%B9%E5%BE%81%E5%88%86%E7%B1%BB%E5%99%A8%E5%AE%9E%E7%8E%B0%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B%E4%B8%8E%E6%98%BE%E7%A4%BA\"><span class=\"toc-text\">基于OpenCV 的 Haar 特征分类器实现人脸检测与显示</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">1. 环境配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">2. 代码实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E5%AF%BC%E5%85%A5%E6%89%80%E9%9C%80%E7%9A%84%E5%BA%93\"><span class=\"toc-text\">2.1. 导入所需的库</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E5%AE%9A%E4%B9%89%E6%98%BE%E7%A4%BA%E5%9B%BE%E5%83%8F%E7%9A%84%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">2.2. 定义显示图像的函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-%E7%BB%98%E5%88%B6%E4%BA%BA%E8%84%B8%E7%9F%A9%E5%BD%A2%E6%A1%86%E7%9A%84%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">2.3. 绘制人脸矩形框的函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-%E4%B8%BB%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">2.4. 主程序</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C%E5%88%86%E6%9E%90\"><span class=\"toc-text\">3. 运行结果分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E7%BB%93%E8%AE%BA\"><span class=\"toc-text\">4. 结论</span></a></li></ol></li></ol>","author":{"name":"神秘奇男子","slug":"blog-author","avatar":"https://i.ibb.co/b3C0QpT/584-2022101195826670.jpg","link":"/","description":"一位旨在梳理所学、分享个人经验的入门级菜坤","socials":{"github":"https://github.com/August618?tab=repositories","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/august121wsy","csdn":"https://blog.csdn.net/UPCAUG?spm=1011.2124.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/1931947622/favlist?fid=1765359122"},"Gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/wu-shanyu-AUG"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"简单的水果分类识别","uid":"3c9c3f4226248e23e6c72e4ac83d74c5","slug":"水果分类识别","date":"2024-09-06T13:41:30.558Z","updated":"2024-09-06T13:50:01.847Z","comments":true,"path":"api/articles/水果分类识别.json","keywords":null,"cover":"https://images.pexels.com/photos/68525/soap-colorful-color-fruit-68525.jpeg?cs=srgb&dl=pexels-pixabay-68525.jpg&fm=jpg","text":"任务一：水果分类识别​ 首先我先描述一下我的大体实现思路： 整体思路流程 特征提取：从图像中提取两类特征（边界特征和纹理特征），用于描述水果的形状和表面纹理。 ...","permalink":"/post/水果分类识别","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"机器学习","slug":"机器学习","count":1,"path":"api/categories/机器学习.json"}],"tags":[{"name":"逻辑回归","slug":"逻辑回归","count":1,"path":"api/tags/逻辑回归.json"},{"name":"水果分类","slug":"水果分类","count":1,"path":"api/tags/水果分类.json"},{"name":"计算机视觉","slug":"计算机视觉","count":1,"path":"api/tags/计算机视觉.json"}],"author":{"name":"神秘奇男子","slug":"blog-author","avatar":"https://i.ibb.co/b3C0QpT/584-2022101195826670.jpg","link":"/","description":"一位旨在梳理所学、分享个人经验的入门级菜坤","socials":{"github":"https://github.com/August618?tab=repositories","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/august121wsy","csdn":"https://blog.csdn.net/UPCAUG?spm=1011.2124.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/1931947622/favlist?fid=1765359122"},"Gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/wu-shanyu-AUG"}}}},"feature":true},"next_post":{"title":"Welcome to AUG's Blog","uid":"3ceded50fe0dd372bcf8c1a5f8350431","slug":"hello-world","date":"2024-08-21T13:16:45.064Z","updated":"2024-08-24T06:23:45.803Z","comments":true,"path":"api/articles/hello-world.json","keywords":null,"cover":"https://shp.qpic.cn/ishow/2735062818/1719569941_829394697_32271_sProdImgNo_2.jpg/0","text":" Hello,你们好！（づ￣3￣）づ╭❤️～欢迎来到我的博客我会不定期持续更新文章,欢迎大家批评指正","permalink":"/post/hello-world","photos":[],"count_time":{"symbolsCount":50,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"博客简介","slug":"博客简介","count":1,"path":"api/tags/博客简介.json"}],"author":{"name":"神秘奇男子","slug":"blog-author","avatar":"https://i.ibb.co/b3C0QpT/584-2022101195826670.jpg","link":"/","description":"一位旨在梳理所学、分享个人经验的入门级菜坤","socials":{"github":"https://github.com/August618?tab=repositories","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/august121wsy","csdn":"https://blog.csdn.net/UPCAUG?spm=1011.2124.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/1931947622/favlist?fid=1765359122"},"Gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/wu-shanyu-AUG"}}}},"feature":true}}