{"title":"MybatisPlus入门","uid":"f50948573c1bc1468571d16f17cedea9","slug":"MybatisPlus","date":"2024-09-20T12:19:36.839Z","updated":"2024-09-20T12:51:52.808Z","comments":true,"path":"api/articles/MybatisPlus.json","keywords":null,"cover":"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ_t6KLyzOoKv3ViOi4e1PeC6GGX3N1Mc13-A&s","content":"<h1 id=\"MybatisPlus入门\"><a href=\"#MybatisPlus入门\" class=\"headerlink\" title=\"MybatisPlus入门\"></a>MybatisPlus入门</h1><p>[TOC]</p>\n<h1 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h1><p>​\t</p>\n<p>​\t大家在日常开发中应该能发现，单表的CRUD功能代码重复度很高，也没有什么难度。而这部分代码量往往比较大，开发起来比较费时。</p>\n<p>​\t</p>\n<p>​\t因此，目前企业中都会使用一些组件来简化或省略单表的CRUD开发工作。目前在国内使用较多的一个组件就是MybatisPlus.</p>\n<p>​\t<a href=\"https://github.com/baomidou/mybatis-plus\">MyBatis-Plus</a> 是一个 <a href=\"https://www.mybatis.org/mybatis-3/\">MyBatis</a> 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p>\n<p>:::warning<br>它的愿景是成为 MyBatis 最好的搭档，就像 <strong>魂斗罗</strong> 中的 1P、2P，基友搭配，效率翻倍。<br>:::<br>​\t</p>\n<p><img src=\"https://baomidou.com/images/content/relationship-with-mybatis.png\" alt=\"Relationship Between MyBatis and MyBatis-Plus\"></p>\n<h1 id=\"2-快速入门\"><a href=\"#2-快速入门\" class=\"headerlink\" title=\"2.快速入门\"></a>2.快速入门</h1><p>比如我们要实现User表的CRUD，只需要下面几步：</p>\n<ul>\n<li>引入MybatisPlus依赖</li>\n<li>定义Mapper</li>\n</ul>\n<h2 id=\"2-1引入依赖\"><a href=\"#2-1引入依赖\" class=\"headerlink\" title=\"2.1引入依赖\"></a>2.1引入依赖</h2><p>MybatisPlus提供了starter，实现了自动Mybatis以及MybatisPlus的自动装配功能，坐标如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.baomidou<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.5.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>由于这个starter包含对mybatis的自动装配，因此完全可以替换掉Mybatis的starter。</p>\n<h2 id=\"2-2定义Mapper\"><a href=\"#2-2定义Mapper\" class=\"headerlink\" title=\"2.2定义Mapper\"></a>2.2定义Mapper</h2><p>为了简化单表CRUD，MybatisPlus提供了一个基础的<code>BaseMapper</code>接口，其中已经实现了单表的CRUD：</p>\n<p>因此我们自定义的Mapper只要实现了这个<code>BaseMapper</code>，就无需自己实现单表CRUD了。</p>\n<h2 id=\"2-3常见注解\"><a href=\"#2-3常见注解\" class=\"headerlink\" title=\"2.3常见注解\"></a>2.3常见注解</h2><p>MybatisPlus如何知道我们要查询的是哪张表？表中有哪些字段呢？</p>\n<p>UserMapper在继承BaseMapper的时候指定了一个泛型：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface UserMapper extends BaseMapper&lt;User&gt;</span><br></pre></td></tr></table></figure>\n\n<p>泛型中的User就是与数据库对应的PO.</p>\n<p>MybatisPlus就是根据PO实体的信息来推断出表的信息，从而生成SQL的。默认情况下：</p>\n<ul>\n<li>MybatisPlus会把PO实体的类名驼峰转下划线作为表名</li>\n<li>MybatisPlus会把PO实体的所有变量名驼峰转下划线作为表的字段名，并根据变量类型推断字段类型</li>\n<li>MybatisPlus会把名为id的字段作为主键</li>\n</ul>\n<p>但很多情况下，默认的实现与实际场景不符，因此MybatisPlus提供了一些注解便于我们声明表信息。</p>\n<h3 id=\"2-3-1-TableName\"><a href=\"#2-3-1-TableName\" class=\"headerlink\" title=\"2.3.1.@TableName\"></a>2.3.1.@TableName</h3><p>说明：</p>\n<ul>\n<li>描述：表名注解，标识实体类对应的表</li>\n<li>使用位置：实体类</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@TableName(&quot;user&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>TableName注解除了指定表名以外，还可以指定很多其它属性：</p>\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th><strong>类型</strong></th>\n<th><strong>必须指定</strong></th>\n<th><strong>默认值</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>value</td>\n<td>String</td>\n<td>否</td>\n<td>“”</td>\n<td>表名</td>\n</tr>\n<tr>\n<td>schema</td>\n<td>String</td>\n<td>否</td>\n<td>“”</td>\n<td>schema</td>\n</tr>\n<tr>\n<td>keepGlobalPrefix</td>\n<td>boolean</td>\n<td>否</td>\n<td>false</td>\n<td>是否保持使用全局的 tablePrefix 的值（当全局 tablePrefix 生效时）</td>\n</tr>\n<tr>\n<td>resultMap</td>\n<td>String</td>\n<td>否</td>\n<td>“”</td>\n<td>xml 中 resultMap 的 id（用于满足特定类型的实体类对象绑定）</td>\n</tr>\n<tr>\n<td>autoResultMap</td>\n<td>boolean</td>\n<td>否</td>\n<td>false</td>\n<td>是否自动构建 resultMap 并使用（如果设置 resultMap 则不会进行 resultMap 的自动构建与注入）</td>\n</tr>\n<tr>\n<td>excludeProperty</td>\n<td>String[]</td>\n<td>否</td>\n<td>{}</td>\n<td>需要排除的属性名 @since 3.3.1</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-3-2-TableId\"><a href=\"#2-3-2-TableId\" class=\"headerlink\" title=\"2.3.2.@TableId\"></a>2.3.2.@TableId</h3><p>说明：</p>\n<ul>\n<li>描述：主键注解，标识实体类中的主键字段</li>\n<li>使用位置：实体类的主键字段</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@TableName(&quot;user&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@TableId</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>TableId</code>注解支持两个属性：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><strong>属性</strong></th>\n<th align=\"left\"><strong>类型</strong></th>\n<th align=\"left\"><strong>必须指定</strong></th>\n<th align=\"left\"><strong>默认值</strong></th>\n<th align=\"left\"><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">value</td>\n<td align=\"left\">String</td>\n<td align=\"left\">否</td>\n<td align=\"left\">“”</td>\n<td align=\"left\">表名</td>\n</tr>\n<tr>\n<td align=\"left\">type</td>\n<td align=\"left\">Enum</td>\n<td align=\"left\">否</td>\n<td align=\"left\">IdType.NONE</td>\n<td align=\"left\">指定主键类型</td>\n</tr>\n</tbody></table>\n<p><code>IdType</code>支持的类型有：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><strong>值</strong></th>\n<th align=\"left\"><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">AUTO</td>\n<td align=\"left\">数据库 ID 自增</td>\n</tr>\n<tr>\n<td align=\"left\">NONE</td>\n<td align=\"left\">无状态，该类型为未设置主键类型（注解里等于跟随全局，全局里约等于 INPUT）</td>\n</tr>\n<tr>\n<td align=\"left\">INPUT</td>\n<td align=\"left\">insert 前自行 set 主键值</td>\n</tr>\n<tr>\n<td align=\"left\">ASSIGN_ID</td>\n<td align=\"left\">分配 ID(主键类型为 Number(Long 和 Integer)或 String)(since 3.3.0),使用接口IdentifierGenerator的方法nextId(默认实现类为DefaultIdentifierGenerator雪花算法)</td>\n</tr>\n<tr>\n<td align=\"left\">ASSIGN_UUID</td>\n<td align=\"left\">分配 UUID,主键类型为 String(since 3.3.0),使用接口IdentifierGenerator的方法nextUUID(默认 default 方法)</td>\n</tr>\n<tr>\n<td align=\"left\">ID_WORKER</td>\n<td align=\"left\">分布式全局唯一 ID 长整型类型(please use ASSIGN_ID)</td>\n</tr>\n<tr>\n<td align=\"left\">UUID</td>\n<td align=\"left\">32 位 UUID 字符串(please use ASSIGN_UUID)</td>\n</tr>\n<tr>\n<td align=\"left\">ID_WORKER_STR</td>\n<td align=\"left\">分布式全局唯一 ID 字符串类型(please use ASSIGN_ID)</td>\n</tr>\n</tbody></table>\n<p>这里比较常见的有三种：</p>\n<ul>\n<li><code>AUTO</code>：利用数据库的id自增长</li>\n<li><code>INPUT</code>：手动生成id</li>\n<li><code>ASSIGN_ID</code>：雪花算法生成<code>Long</code>类型的全局唯一id，这是默认的ID策略</li>\n</ul>\n<h3 id=\"2-3-3-TableField\"><a href=\"#2-3-3-TableField\" class=\"headerlink\" title=\"2.3.3.@TableField\"></a>2.3.3.@TableField</h3><p>说明：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>描述：普通字段注解</p></blockquote>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@TableName(&quot;user&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@TableId</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"meta\">@TableField(&quot;isMarried&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean isMarried;</span><br><span class=\"line\">    <span class=\"meta\">@TableField(&quot;concat&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String concat;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一般情况下我们并不需要给字段添加<code>@TableField</code>注解，一些特殊情况除外：</p>\n<ul>\n<li>成员变量名与数据库字段名不一致</li>\n<li>成员变量是以<code>isXXX</code>命名，按照<code>JavaBean</code>的规范，<code>MybatisPlus</code>识别字段时会把<code>is</code>去除，这就导致与数据库不符。</li>\n<li>成员变量名与数据库一致，但是与数据库的关键字冲突。使用<code>@TableField</code>注解给字段名添加转义字符：&#96;&#96;&#96;&#96;</li>\n</ul>\n<p>支持的其它属性如下：</p>\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th><strong>类型</strong></th>\n<th><strong>必填</strong></th>\n<th><strong>默认值</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>value</td>\n<td>String</td>\n<td>否</td>\n<td>“”</td>\n<td>数据库字段名</td>\n</tr>\n<tr>\n<td>exist</td>\n<td>boolean</td>\n<td>否</td>\n<td>true</td>\n<td>是否为数据库表字段</td>\n</tr>\n<tr>\n<td>condition</td>\n<td>String</td>\n<td>否</td>\n<td>“”</td>\n<td>字段 where 实体查询比较条件，有值设置则按设置的值为准，没有则为默认全局的 ，<a href=\"https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/SqlCondition.java\">参考(opens new window)</a></td>\n</tr>\n<tr>\n<td>update</td>\n<td>String</td>\n<td>否</td>\n<td>“”</td>\n<td>字段 update set 部分注入，例如：当在version字段上注解update&#x3D;”%s+1” 表示更新时会 set version&#x3D;version+1 （该属性优先级高于 el 属性）</td>\n</tr>\n<tr>\n<td>insertStrategy</td>\n<td>Enum</td>\n<td>否</td>\n<td>FieldStrategy.DEFAULT</td>\n<td>举例：NOT_NULL insert into table_a(<if test=\"columnProperty != null\">column</if>) values (<if test=\"columnProperty != null\">#{columnProperty}</if>)</td>\n</tr>\n<tr>\n<td>updateStrategy</td>\n<td>Enum</td>\n<td>否</td>\n<td>FieldStrategy.DEFAULT</td>\n<td>举例：IGNORED update table_a set column&#x3D;#{columnProperty}</td>\n</tr>\n<tr>\n<td>whereStrategy</td>\n<td>Enum</td>\n<td>否</td>\n<td>FieldStrategy.DEFAULT</td>\n<td>举例：NOT_EMPTY where <if test=\"columnProperty != null and columnProperty!=''\">column&#x3D;#{columnProperty}</if></td>\n</tr>\n<tr>\n<td>fill</td>\n<td>Enum</td>\n<td>否</td>\n<td>FieldFill.DEFAULT</td>\n<td>字段自动填充策略</td>\n</tr>\n<tr>\n<td>select</td>\n<td>boolean</td>\n<td>否</td>\n<td>true</td>\n<td>是否进行 select 查询</td>\n</tr>\n<tr>\n<td>keepGlobalFormat</td>\n<td>boolean</td>\n<td>否</td>\n<td>false</td>\n<td>是否保持使用全局的 format 进行处理</td>\n</tr>\n<tr>\n<td>jdbcType</td>\n<td>JdbcType</td>\n<td>否</td>\n<td>JdbcType.UNDEFINED</td>\n<td>JDBC 类型 (该默认值不代表会按照该值生效)</td>\n</tr>\n<tr>\n<td>typeHandler</td>\n<td>TypeHander</td>\n<td>否</td>\n<td></td>\n<td>类型处理器 (该默认值不代表会按照该值生效)</td>\n</tr>\n<tr>\n<td>numericScale</td>\n<td>String</td>\n<td>否</td>\n<td>“”</td>\n<td>指定小数点后保留的位数</td>\n</tr>\n</tbody></table>\n<h2 id=\"2-4常见配置\"><a href=\"#2-4常见配置\" class=\"headerlink\" title=\"2.4常见配置\"></a>2.4常见配置</h2><p>MybatisPlus也支持基于yaml文件的自定义配置。</p>\n<p>大多数的配置都有默认值，因此我们都无需配置。但还有一些是没有默认值的，例如:</p>\n<ul>\n<li>实体类的别名扫描包</li>\n<li>全局id类型</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mybatis-plus:</span></span><br><span class=\"line\">  <span class=\"attr\">type-aliases-package:</span> <span class=\"string\">com.itheima.mp.domain.po</span></span><br><span class=\"line\">  <span class=\"attr\">global-config:</span></span><br><span class=\"line\">    <span class=\"attr\">db-config:</span></span><br><span class=\"line\">      <span class=\"attr\">id-type:</span> <span class=\"string\">auto</span> <span class=\"comment\"># 全局id类型为自增长</span></span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，MyBatisPlus也支持手写SQL的，而mapper文件的读取地址可以自己配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mybatis-plus:</span></span><br><span class=\"line\">  <span class=\"attr\">mapper-locations:</span> <span class=\"string\">&quot;classpath*:/mapper/**/*.xml&quot;</span> <span class=\"comment\"># Mapper.xml文件地址，当前这个是默认值。</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到默认值是<code>classpath*:/mapper/**/*.xml</code>，也就是说我们只要把mapper.xml文件放置这个目录下就一定会被加载。</p>\n<h1 id=\"3-核心功能\"><a href=\"#3-核心功能\" class=\"headerlink\" title=\"3.核心功能\"></a>3.核心功能</h1><p>刚才的案例中都是以id为条件的简单CRUD，一些复杂条件的SQL语句就要用到一些更高级的功能了。</p>\n<h2 id=\"3-1-条件构造器\"><a href=\"#3-1-条件构造器\" class=\"headerlink\" title=\"3.1.条件构造器\"></a>3.1.条件构造器</h2><p>除了新增以外，修改、删除、查询的SQL语句都需要指定where条件。因此BaseMapper中提供的相关方法除了以<code>id</code>作为<code>where</code>条件以外，还支持更加复杂的<code>where</code>条件。</p>\n<h3 id=\"3-1-1-QueryWrapper\"><a href=\"#3-1-1-QueryWrapper\" class=\"headerlink\" title=\"3.1.1.QueryWrapper\"></a>3.1.1.QueryWrapper</h3><p>无论是修改、删除、查询，都可以使用QueryWrapper来构建查询条件。接下来看一些例子： <strong>查询</strong>：查询出名字中带<code>o</code>的，存款大于等于1000元的人。代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testQueryWrapper</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.构建查询条件 where name like &quot;%o%&quot; AND balance &gt;= 1000</span></span><br><span class=\"line\">    QueryWrapper&lt;User&gt; wrapper = <span class=\"keyword\">new</span> <span class=\"title class_\">QueryWrapper</span>&lt;User&gt;()</span><br><span class=\"line\">            .select(<span class=\"string\">&quot;id&quot;</span>, <span class=\"string\">&quot;username&quot;</span>, <span class=\"string\">&quot;info&quot;</span>, <span class=\"string\">&quot;balance&quot;</span>)</span><br><span class=\"line\">            .like(<span class=\"string\">&quot;username&quot;</span>, <span class=\"string\">&quot;o&quot;</span>)</span><br><span class=\"line\">            .ge(<span class=\"string\">&quot;balance&quot;</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.查询数据</span></span><br><span class=\"line\">    List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class=\"line\">    users.forEach(System.out::println);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>更新</strong>：更新用户名为jack的用户的余额为2000，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testUpdateByQueryWrapper</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.构建查询条件 where name = &quot;Jack&quot;</span></span><br><span class=\"line\">    QueryWrapper&lt;User&gt; wrapper = <span class=\"keyword\">new</span> <span class=\"title class_\">QueryWrapper</span>&lt;User&gt;().eq(<span class=\"string\">&quot;username&quot;</span>, <span class=\"string\">&quot;Jack&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.更新数据，user中非null字段都会作为set语句</span></span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">    user.setBalance(<span class=\"number\">2000</span>);</span><br><span class=\"line\">    userMapper.update(user, wrapper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-1-2-UpdateWrapper\"><a href=\"#3-1-2-UpdateWrapper\" class=\"headerlink\" title=\"3.1.2.UpdateWrapper\"></a>3.1.2.UpdateWrapper</h3><p>基于BaseMapper中的update方法更新时只能直接赋值，对于一些复杂的需求就难以实现。 例如：更新id为<code>1,2,4</code>的用户的余额，扣200，对应的SQL应该是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE user <span class=\"type\">SET</span> <span class=\"variable\">balance</span> <span class=\"operator\">=</span> balance - <span class=\"number\">200</span> WHERE id <span class=\"title function_\">in</span> <span class=\"params\">(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>)</span></span><br></pre></td></tr></table></figure>\n\n<p>SET的赋值结果是基于字段现有值的，这个时候就要利用UpdateWrapper中的setSql功能了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testUpdateWrapper</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    List&lt;Long&gt; ids = List.of(<span class=\"number\">1L</span>, <span class=\"number\">2L</span>, <span class=\"number\">4L</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 1.生成SQL</span></span><br><span class=\"line\">    UpdateWrapper&lt;User&gt; wrapper = <span class=\"keyword\">new</span> <span class=\"title class_\">UpdateWrapper</span>&lt;User&gt;()</span><br><span class=\"line\">            .setSql(<span class=\"string\">&quot;balance = balance - 200&quot;</span>) <span class=\"comment\">// SET balance = balance - 200</span></span><br><span class=\"line\">            .in(<span class=\"string\">&quot;id&quot;</span>, ids); <span class=\"comment\">// WHERE id in (1, 2, 4)</span></span><br><span class=\"line\">        <span class=\"comment\">// 2.更新，注意第一个参数可以给null，也就是不填更新字段和数据，</span></span><br><span class=\"line\">    <span class=\"comment\">// 而是基于UpdateWrapper中的setSQL来更新</span></span><br><span class=\"line\">    userMapper.update(<span class=\"literal\">null</span>, wrapper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-1-3-LambdaQueryWrapper\"><a href=\"#3-1-3-LambdaQueryWrapper\" class=\"headerlink\" title=\"3.1.3.LambdaQueryWrapper\"></a>3.1.3.LambdaQueryWrapper</h3><p>无论是QueryWrapper还是UpdateWrapper在构造条件的时候都需要写死字段名称，会出现字符串<code>魔法值</code>。这在编程规范中显然是不推荐的。 那怎么样才能不写字段名，又能知道字段名呢？</p>\n<p>其中一种办法是基于变量的<code>gettter</code>方法结合反射技术。因此我们只要将条件对应的字段的<code>getter</code>方法传递给MybatisPlus，它就能计算出对应的变量名了。而传递方法可以使用JDK8中的<code>方法引用</code>和<code>Lambda</code>表达式。 因此MybatisPlus又提供了一套基于Lambda的Wrapper，包含两个：</p>\n<ul>\n<li>LambdaQueryWrapper</li>\n<li>LambdaUpdateWrapper</li>\n</ul>\n<p>分别对应QueryWrapper和UpdateWrapper</p>\n<p>其使用方式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testLambdaQueryWrapper</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.构建条件 WHERE username LIKE &quot;%o%&quot; AND balance &gt;= 1000</span></span><br><span class=\"line\">    QueryWrapper&lt;User&gt; wrapper = <span class=\"keyword\">new</span> <span class=\"title class_\">QueryWrapper</span>&lt;&gt;();</span><br><span class=\"line\">    wrapper.lambda()</span><br><span class=\"line\">            .select(User::getId, User::getUsername, User::getInfo, User::getBalance)</span><br><span class=\"line\">            .like(User::getUsername, <span class=\"string\">&quot;o&quot;</span>)</span><br><span class=\"line\">            .ge(User::getBalance, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.查询</span></span><br><span class=\"line\">    List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class=\"line\">    users.forEach(System.out::println);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"3-2-自定义SQL\"><a href=\"#3-2-自定义SQL\" class=\"headerlink\" title=\"3.2.自定义SQL\"></a>3.2.自定义SQL</h2><p>在演示UpdateWrapper的案例中，我们在代码中编写了更新的SQL语句：</p>\n<p>这种写法在某些企业也是不允许的，因为SQL语句最好都维护在持久层，而不是业务层。就当前案例来说，由于条件是in语句，只能将SQL写在Mapper.xml文件，利用foreach来生成动态SQL。 这实在是太麻烦了。假如查询条件更复杂，动态SQL的编写也会更加复杂。</p>\n<p>所以，MybatisPlus提供了自定义SQL功能，可以让我们利用Wrapper生成查询条件，再结合Mapper.xml编写SQL</p>\n<h3 id=\"3-2-1-基本用法\"><a href=\"#3-2-1-基本用法\" class=\"headerlink\" title=\"3.2.1.基本用法\"></a>3.2.1.基本用法</h3><p>以当前案例来说，我们可以这样写：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testCustomWrapper</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.准备自定义查询条件</span></span><br><span class=\"line\">    List&lt;Long&gt; ids = List.of(<span class=\"number\">1L</span>, <span class=\"number\">2L</span>, <span class=\"number\">4L</span>);</span><br><span class=\"line\">    QueryWrapper&lt;User&gt; wrapper = <span class=\"keyword\">new</span> <span class=\"title class_\">QueryWrapper</span>&lt;User&gt;().in(<span class=\"string\">&quot;id&quot;</span>, ids);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2.调用mapper的自定义方法，直接传递Wrapper</span></span><br><span class=\"line\">    userMapper.deductBalanceByIds(<span class=\"number\">200</span>, wrapper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在UserMapper中自定义SQL：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.mp.mapper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itheima.mp.domain.po.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.annotations.Param;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.annotations.Update;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.annotations.Param;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Select(&quot;UPDATE user SET balance = balance - #&#123;money&#125; $&#123;ew.customSqlSegment&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">deductBalanceByIds</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;money&quot;)</span> <span class=\"type\">int</span> money, <span class=\"meta\">@Param(&quot;ew&quot;)</span> QueryWrapper&lt;User&gt; wrapper)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样就省去了编写复杂查询条件的烦恼了。</p>\n<h3 id=\"3-2-2-多表关联\"><a href=\"#3-2-2-多表关联\" class=\"headerlink\" title=\"3.2.2.多表关联\"></a>3.2.2.多表关联</h3><p>理论上来讲MyBatisPlus是不支持多表查询的，不过我们可以利用Wrapper中自定义条件结合自定义SQL来实现多表查询的效果。 例如，我们要查询出所有收货地址在北京的并且用户id在1、2、4之中的用户 要是自己基于mybatis实现SQL，大概是这样的：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;queryUserByIdAndAddr&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;com.itheima.mp.domain.po.User&quot;</span>&gt;</span></span><br><span class=\"line\">      SELECT *</span><br><span class=\"line\">      FROM user u</span><br><span class=\"line\">      INNER JOIN address a ON u.id = a.user_id</span><br><span class=\"line\">      WHERE u.id</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">foreach</span> <span class=\"attr\">collection</span>=<span class=\"string\">&quot;ids&quot;</span> <span class=\"attr\">separator</span>=<span class=\"string\">&quot;,&quot;</span> <span class=\"attr\">item</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">open</span>=<span class=\"string\">&quot;IN (&quot;</span> <span class=\"attr\">close</span>=<span class=\"string\">&quot;)&quot;</span>&gt;</span></span><br><span class=\"line\">          #&#123;id&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">foreach</span>&gt;</span></span><br><span class=\"line\">      AND a.city = #&#123;city&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看出其中最复杂的就是WHERE条件的编写，如果业务复杂一些，这里的SQL会更变态。</p>\n<p>但是基于自定义SQL结合Wrapper的玩法，我们就可以利用Wrapper来构建查询条件，然后手写SELECT及FROM部分，实现多表查询。</p>\n<p>查询条件这样来构建：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testCustomJoinWrapper</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.准备自定义查询条件</span></span><br><span class=\"line\">    QueryWrapper&lt;User&gt; wrapper = <span class=\"keyword\">new</span> <span class=\"title class_\">QueryWrapper</span>&lt;User&gt;()</span><br><span class=\"line\">            .in(<span class=\"string\">&quot;u.id&quot;</span>, List.of(<span class=\"number\">1L</span>, <span class=\"number\">2L</span>, <span class=\"number\">4L</span>))</span><br><span class=\"line\">            .eq(<span class=\"string\">&quot;a.city&quot;</span>, <span class=\"string\">&quot;北京&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2.调用mapper的自定义方法</span></span><br><span class=\"line\">    List&lt;User&gt; users = userMapper.queryUserByWrapper(wrapper);</span><br><span class=\"line\"></span><br><span class=\"line\">    users.forEach(System.out::println);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在UserMapper中自定义方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Select(&quot;SELECT u.* FROM user u INNER JOIN address a ON u.id = a.user_id $&#123;ew.customSqlSegment&#125;&quot;)</span></span><br><span class=\"line\">List&lt;User&gt; <span class=\"title function_\">queryUserByWrapper</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;ew&quot;)</span>QueryWrapper&lt;User&gt; wrapper)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>当然，也可以在<code>UserMapper.xml</code>中写SQL：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;queryUserByIdAndAddr&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;com.itheima.mp.domain.po.User&quot;</span>&gt;</span></span><br><span class=\"line\">    SELECT * FROM user u INNER JOIN address a ON u.id = a.user_id $&#123;ew.customSqlSegment&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"3-3-Service接口\"><a href=\"#3-3-Service接口\" class=\"headerlink\" title=\"3.3.Service接口\"></a>3.3.Service接口</h2><p>MybatisPlus不仅提供了BaseMapper，还提供了通用的Service接口及默认实现，封装了一些常用的service模板方法。 通用接口为<code>IService</code>，默认实现为<code>ServiceImpl</code>，其中封装的方法可以分为以下几类：</p>\n<ul>\n<li><code>save</code>：新增</li>\n<li><code>remove</code>：删除</li>\n<li><code>update</code>：更新</li>\n<li><code>get</code>：查询单个结果</li>\n<li><code>list</code>：查询集合结果</li>\n<li><code>count</code>：计数</li>\n<li><code>page</code>：分页查询</li>\n</ul>\n<h3 id=\"3-3-1-CRUD\"><a href=\"#3-3-1-CRUD\" class=\"headerlink\" title=\"3.3.1.CRUD\"></a>3.3.1.CRUD</h3><p>我们先俩看下基本的CRUD接口。 </p>\n<p><strong>新增</strong>：</p>\n<ul>\n<li><code>save</code>是新增单个元素</li>\n<li><code>saveBatch</code>是批量新增</li>\n<li><code>saveOrUpdate</code>是根据id判断，如果数据存在就更新，不存在则新增</li>\n<li><code>saveOrUpdateBatch</code>是批量的新增或修改</li>\n</ul>\n<p><strong>删除：</strong></p>\n<ul>\n<li><code>removeById</code>：根据id删除</li>\n<li><code>removeByIds</code>：根据id批量删除</li>\n<li><code>removeByMap</code>：根据Map中的键值对为条件删除</li>\n<li><code>remove(Wrapper&lt;T&gt;)</code>：根据Wrapper条件删除</li>\n<li><code>~~removeBatchByIds~~</code>：暂不支持</li>\n</ul>\n<p><strong>修改：</strong></p>\n<ul>\n<li><code>updateById</code>：根据id修改</li>\n<li><code>update(Wrapper&lt;T&gt;)</code>：根据<code>UpdateWrapper</code>修改，<code>Wrapper</code>中包含<code>set</code>和<code>where</code>部分</li>\n<li><code>update(T，Wrapper&lt;T&gt;)</code>：按照<code>T</code>内的数据修改与<code>Wrapper</code>匹配到的数据</li>\n<li><code>updateBatchById</code>：根据id批量修改</li>\n</ul>\n<p><strong>Get：</strong></p>\n<ul>\n<li><code>getById</code>：根据id查询1条数据</li>\n<li><code>getOne(Wrapper&lt;T&gt;)</code>：根据<code>Wrapper</code>查询1条数据</li>\n<li><code>getBaseMapper</code>：获取<code>Service</code>内的<code>BaseMapper</code>实现，某些时候需要直接调用<code>Mapper</code>内的自定义<code>SQL</code>时可以用这个方法获取到<code>Mapper</code></li>\n</ul>\n<p><strong>List：</strong></p>\n<ul>\n<li><code>listByIds</code>：根据id批量查询</li>\n<li><code>list(Wrapper&lt;T&gt;)</code>：根据Wrapper条件查询多条数据</li>\n<li><code>list()</code>：查询所有</li>\n</ul>\n<p><strong>Count</strong>：</p>\n<ul>\n<li><code>count()</code>：统计所有数量</li>\n<li><code>count(Wrapper&lt;T&gt;)</code>：统计符合<code>Wrapper</code>条件的数据数量</li>\n</ul>\n<p><strong>getBaseMapper</strong>： 当我们在service中要调用Mapper中自定义SQL时，就必须获取service对应的Mapper，就可以通过这个方法：</p>\n<h3 id=\"3-3-2-基本用法\"><a href=\"#3-3-2-基本用法\" class=\"headerlink\" title=\"3.3.2.基本用法\"></a>3.3.2.基本用法</h3><p>由于<code>Service</code>中经常需要定义与业务有关的自定义方法，因此我们不能直接使用<code>IService</code>，而是自定义<code>Service</code>接口，然后继承<code>IService</code>以拓展方法。同时，让自定义的<code>Service实现类</code>继承<code>ServiceImpl</code>，这样就不用自己实现<code>IService</code>中的接口了。</p>\n<p>首先，定义<code>IUserService</code>，继承<code>IService</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.mp.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itheima.mp.domain.po.User;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IUserService</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">IService</span>&lt;User&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 拓展自定义方法</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后，编写<code>UserServiceImpl</code>类，继承<code>ServiceImpl</code>，实现<code>UserService</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.mp.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itheima.mp.domain.po.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itheima.mp.domain.po.service.IUserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itheima.mp.mapper.UserMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserServiceImpl</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ServiceImpl</span>&lt;UserMapper, User&gt;</span><br><span class=\"line\">                                                                                                        <span class=\"keyword\">implements</span> <span class=\"title class_\">IUserService</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>项目结构如下：</p>\n<p>接下来，我们快速实现下面4个接口：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><strong>编号</strong></th>\n<th align=\"left\"><strong>接口</strong></th>\n<th align=\"left\"><strong>请求方式</strong></th>\n<th align=\"left\"><strong>请求路径</strong></th>\n<th align=\"left\"><strong>请求参数</strong></th>\n<th align=\"left\"><strong>返回值</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">新增用户</td>\n<td align=\"left\">POST</td>\n<td align=\"left\">&#x2F;users</td>\n<td align=\"left\">用户表单实体</td>\n<td align=\"left\">无</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">删除用户</td>\n<td align=\"left\">DELETE</td>\n<td align=\"left\">&#x2F;users&#x2F;{id}</td>\n<td align=\"left\">用户id</td>\n<td align=\"left\">无</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">根据id查询用户</td>\n<td align=\"left\">GET</td>\n<td align=\"left\">&#x2F;users&#x2F;{id}</td>\n<td align=\"left\">用户id</td>\n<td align=\"left\">用户VO</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">根据id批量查询</td>\n<td align=\"left\">GET</td>\n<td align=\"left\">&#x2F;users</td>\n<td align=\"left\">用户id集合</td>\n<td align=\"left\">用户VO集合</td>\n</tr>\n</tbody></table>\n<p>首先，我们在项目中引入几个依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--swagger--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.xiaoymin<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>knife4j-openapi2-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--web--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后需要配置swagger信息：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">knife4j:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">openapi:</span></span><br><span class=\"line\">    <span class=\"attr\">title:</span> <span class=\"string\">用户管理接口文档</span></span><br><span class=\"line\">    <span class=\"attr\">description:</span> <span class=\"string\">&quot;用户管理接口文档&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">email:</span> <span class=\"string\">zhanghuyi@itcast.cn</span></span><br><span class=\"line\">    <span class=\"attr\">concat:</span> <span class=\"string\">虎哥</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">https://www.itcast.cn</span></span><br><span class=\"line\">    <span class=\"attr\">version:</span> <span class=\"string\">v1.0.0</span></span><br><span class=\"line\">    <span class=\"attr\">group:</span></span><br><span class=\"line\">      <span class=\"attr\">default:</span></span><br><span class=\"line\">        <span class=\"attr\">group-name:</span> <span class=\"string\">default</span></span><br><span class=\"line\">        <span class=\"attr\">api-rule:</span> <span class=\"string\">package</span></span><br><span class=\"line\">        <span class=\"attr\">api-rule-resources:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">com.itheima.mp.controller</span></span><br></pre></td></tr></table></figure>\n\n<p>然后，接口需要两个实体：</p>\n<ul>\n<li>UserFormDTO：代表新增时的用户表单</li>\n<li>UserVO：代表查询的返回结果</li>\n</ul>\n<p>首先是UserFormDTO：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.mp.domain.dto;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.ApiModel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@ApiModel(description = &quot;用户表单实体&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserFormDTO</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;id&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;用户名&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;密码&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;注册手机号&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String phone;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;详细信息，JSON风格&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String info;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;账户余额&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer balance;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后是UserVO：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.mp.domain.vo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.ApiModel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@ApiModel(description = &quot;用户VO实体&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserVO</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;用户id&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;用户名&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;详细信息&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String info;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;使用状态（1正常 2冻结）&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer status;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;账户余额&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer balance;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后，按照Restful风格编写Controller接口方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.mp.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.core.bean.BeanUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itheima.mp.domain.dto.UserFormDTO;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itheima.mp.domain.po.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itheima.mp.domain.vo.UserVO;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itheima.mp.service.IUserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.Api;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.ApiOperation;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.RequiredArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Api(tags = &quot;用户管理接口&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@RequiredArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;users&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> IUserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation(&quot;新增用户&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveUser</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> UserFormDTO userFormDTO)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.转换DTO为PO</span></span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> BeanUtil.copyProperties(userFormDTO, User.class);</span><br><span class=\"line\">        <span class=\"comment\">// 2.新增</span></span><br><span class=\"line\">        userService.save(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation(&quot;删除用户&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">removeUserById</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Long userId)</span>&#123;</span><br><span class=\"line\">        userService.removeById(userId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation(&quot;根据id查询用户&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> UserVO <span class=\"title function_\">queryUserById</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Long userId)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.查询用户</span></span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> userService.getById(userId);</span><br><span class=\"line\">        <span class=\"comment\">// 2.处理vo</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> BeanUtil.copyProperties(user, UserVO.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation(&quot;根据id集合查询用户&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;UserVO&gt; <span class=\"title function_\">queryUserByIds</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;ids&quot;)</span> List&lt;Long&gt; ids)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.查询用户</span></span><br><span class=\"line\">        List&lt;User&gt; users = userService.listByIds(ids);</span><br><span class=\"line\">        <span class=\"comment\">// 2.处理vo</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> BeanUtil.copyToList(users, UserVO.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到上述接口都直接在controller即可实现，无需编写任何service代码，非常方便。</p>\n<p>不过，一些带有业务逻辑的接口则需要在service中自定义实现了。例如下面的需求：</p>\n<ul>\n<li>根据id扣减用户余额</li>\n</ul>\n<p>这看起来是个简单修改功能，只要修改用户余额即可。但这个业务包含一些业务逻辑处理：</p>\n<ul>\n<li>判断用户状态是否正常</li>\n<li>判断用户余额是否充足</li>\n</ul>\n<p>这些业务逻辑都要在service层来做，另外更新余额需要自定义SQL，要在mapper中来实现。因此，我们除了要编写controller以外，具体的业务还要在service和mapper中编写。</p>\n<p>首先在UserController中定义一个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PutMapping(&quot;&#123;id&#125;/deduction/&#123;money&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ApiOperation(&quot;扣减用户余额&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deductBalance</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Long id, <span class=\"meta\">@PathVariable(&quot;money&quot;)</span>Integer money)</span>&#123;</span><br><span class=\"line\">    userService.deductBalance(id, money);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后是UserService接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.mp.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itheima.mp.domain.po.User;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IUserService</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">IService</span>&lt;User&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">deductBalance</span><span class=\"params\">(Long id, Integer money)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后是UserServiceImpl实现类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.mp.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itheima.mp.domain.po.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itheima.mp.mapper.UserMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itheima.mp.service.IUserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserServiceImpl</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ServiceImpl</span>&lt;UserMapper, User&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">IUserService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deductBalance</span><span class=\"params\">(Long id, Integer money)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.查询用户</span></span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> getById(id);</span><br><span class=\"line\">        <span class=\"comment\">// 2.判断用户状态</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (user == <span class=\"literal\">null</span> || user.getStatus() == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;用户状态异常&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 3.判断用户余额</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (user.getBalance() &lt; money) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;用户余额不足&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 4.扣减余额</span></span><br><span class=\"line\">        baseMapper.deductMoneyById(id, money);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后是mapper：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Update(&quot;UPDATE user SET balance = balance - #&#123;money&#125; WHERE id = #&#123;id&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">deductMoneyById</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;id&quot;)</span> Long id, <span class=\"meta\">@Param(&quot;money&quot;)</span> Integer money)</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"3-3-3-Lambda\"><a href=\"#3-3-3-Lambda\" class=\"headerlink\" title=\"3.3.3.Lambda\"></a>3.3.3.Lambda</h3><p>IService中还提供了Lambda功能来简化我们的复杂查询及更新功能。我们通过两个案例来学习一下。</p>\n<p>案例一：实现一个根据复杂条件查询用户的接口，查询条件如下：</p>\n<ul>\n<li>name：用户名关键字，可以为空</li>\n<li>status：用户状态，可以为空</li>\n<li>minBalance：最小余额，可以为空</li>\n<li>maxBalance：最大余额，可以为空</li>\n</ul>\n<p>可以理解成一个用户的后台管理界面，管理员可以自己选择条件来筛选用户，因此上述条件不一定存在，需要做判断。</p>\n<p>我们首先需要定义一个查询条件实体，UserQuery实体：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.mp.domain.query;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.ApiModel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@ApiModel(description = &quot;用户查询条件实体&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserQuery</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;用户名关键字&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;用户状态：1-正常，2-冻结&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer status;</span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;余额最小值&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer minBalance;</span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;余额最大值&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer maxBalance;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来我们在UserController中定义一个controller方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/list&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ApiOperation(&quot;根据id集合查询用户&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;UserVO&gt; <span class=\"title function_\">queryUsers</span><span class=\"params\">(UserQuery query)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.组织条件</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> query.getName();</span><br><span class=\"line\">    <span class=\"type\">Integer</span> <span class=\"variable\">status</span> <span class=\"operator\">=</span> query.getStatus();</span><br><span class=\"line\">    <span class=\"type\">Integer</span> <span class=\"variable\">minBalance</span> <span class=\"operator\">=</span> query.getMinBalance();</span><br><span class=\"line\">    <span class=\"type\">Integer</span> <span class=\"variable\">maxBalance</span> <span class=\"operator\">=</span> query.getMaxBalance();</span><br><span class=\"line\">    LambdaQueryWrapper&lt;User&gt; wrapper = <span class=\"keyword\">new</span> <span class=\"title class_\">QueryWrapper</span>&lt;User&gt;().lambda()</span><br><span class=\"line\">            .like(username != <span class=\"literal\">null</span>, User::getUsername, username)</span><br><span class=\"line\">            .eq(status != <span class=\"literal\">null</span>, User::getStatus, status)</span><br><span class=\"line\">            .ge(minBalance != <span class=\"literal\">null</span>, User::getBalance, minBalance)</span><br><span class=\"line\">            .le(maxBalance != <span class=\"literal\">null</span>, User::getBalance, maxBalance);</span><br><span class=\"line\">    <span class=\"comment\">// 2.查询用户</span></span><br><span class=\"line\">    List&lt;User&gt; users = userService.list(wrapper);</span><br><span class=\"line\">    <span class=\"comment\">// 3.处理vo</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> BeanUtil.copyToList(users, UserVO.class);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在组织查询条件的时候，我们加入了 <code>username != null</code> 这样的参数，意思就是当条件成立时才会添加这个查询条件，类似Mybatis的mapper.xml文件中的<code>&lt;if&gt;</code>标签。这样就实现了动态查询条件效果了。</p>\n<p>不过，上述条件构建的代码太麻烦了。 因此Service中对<code>LambdaQueryWrapper</code>和<code>LambdaUpdateWrapper</code>的用法进一步做了简化。我们无需自己通过<code>new</code>的方式来创建<code>Wrapper</code>，而是直接调用<code>lambdaQuery</code>和<code>lambdaUpdate</code>方法：</p>\n<p>基于Lambda查询：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/list&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ApiOperation(&quot;根据id集合查询用户&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;UserVO&gt; <span class=\"title function_\">queryUsers</span><span class=\"params\">(UserQuery query)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.组织条件</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> query.getName();</span><br><span class=\"line\">    <span class=\"type\">Integer</span> <span class=\"variable\">status</span> <span class=\"operator\">=</span> query.getStatus();</span><br><span class=\"line\">    <span class=\"type\">Integer</span> <span class=\"variable\">minBalance</span> <span class=\"operator\">=</span> query.getMinBalance();</span><br><span class=\"line\">    <span class=\"type\">Integer</span> <span class=\"variable\">maxBalance</span> <span class=\"operator\">=</span> query.getMaxBalance();</span><br><span class=\"line\">    <span class=\"comment\">// 2.查询用户</span></span><br><span class=\"line\">    List&lt;User&gt; users = userService.lambdaQuery()</span><br><span class=\"line\">            .like(username != <span class=\"literal\">null</span>, User::getUsername, username)</span><br><span class=\"line\">            .eq(status != <span class=\"literal\">null</span>, User::getStatus, status)</span><br><span class=\"line\">            .ge(minBalance != <span class=\"literal\">null</span>, User::getBalance, minBalance)</span><br><span class=\"line\">            .le(maxBalance != <span class=\"literal\">null</span>, User::getBalance, maxBalance)</span><br><span class=\"line\">            .list();</span><br><span class=\"line\">    <span class=\"comment\">// 3.处理vo</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> BeanUtil.copyToList(users, UserVO.class);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以发现lambdaQuery方法中除了可以构建条件，还需要在链式编程的最后添加一个<code>list()</code>，这是在告诉MP我们的调用结果需要是一个list集合。这里不仅可以用<code>list()</code>，可选的方法有：</p>\n<ul>\n<li><code>.one()</code>：最多1个结果</li>\n<li><code>.list()</code>：返回集合结果</li>\n<li><code>.count()</code>：返回计数结果</li>\n</ul>\n<p>MybatisPlus会根据链式编程的最后一个方法来判断最终的返回结果。</p>\n<p>与lambdaQuery方法类似，IService中的lambdaUpdate方法可以非常方便的实现复杂更新业务。</p>\n<p>例如下面的需求：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>需求：改造根据id修改用户余额的接口，要求如下</p>\n<ul>\n<li>如果扣减后余额为0，则将用户status修改为冻结状态（2）</li>\n</ul></blockquote>\n<p>也就是说我们在扣减用户余额时，需要对用户剩余余额做出判断，如果发现剩余余额为0，则应该将status修改为2，这就是说update语句的set部分是动态的。</p>\n<p>实现如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deductBalance</span><span class=\"params\">(Long id, Integer money)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.查询用户</span></span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> getById(id);</span><br><span class=\"line\">    <span class=\"comment\">// 2.校验用户状态</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user == <span class=\"literal\">null</span> || user.getStatus() == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;用户状态异常！&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 3.校验余额是否充足</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user.getBalance() &lt; money) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;用户余额不足！&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 4.扣减余额 update tb_user set balance = balance - ?</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">remainBalance</span> <span class=\"operator\">=</span> user.getBalance() - money;</span><br><span class=\"line\">    lambdaUpdate()</span><br><span class=\"line\">            .set(User::getBalance, remainBalance) <span class=\"comment\">// 更新余额</span></span><br><span class=\"line\">            .set(remainBalance == <span class=\"number\">0</span>, User::getStatus, <span class=\"number\">2</span>) <span class=\"comment\">// 动态判断，是否更新status</span></span><br><span class=\"line\">            .eq(User::getId, id)</span><br><span class=\"line\">            .eq(User::getBalance, user.getBalance()) <span class=\"comment\">// 乐观锁</span></span><br><span class=\"line\">            .update();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-3-4-批量新增\"><a href=\"#3-3-4-批量新增\" class=\"headerlink\" title=\"3.3.4.批量新增\"></a>3.3.4.批量新增</h3><p>IService中的批量新增功能使用起来非常方便，但有一点注意事项，我们先来测试一下。 首先我们测试逐条插入数据：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testSaveOneByOne</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100000</span>; i++) &#123;</span><br><span class=\"line\">        userService.save(buildUser(i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">e</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;耗时：&quot;</span> + (e - b));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> User <span class=\"title function_\">buildUser</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">    user.setUsername(<span class=\"string\">&quot;user_&quot;</span> + i);</span><br><span class=\"line\">    user.setPassword(<span class=\"string\">&quot;123&quot;</span>);</span><br><span class=\"line\">    user.setPhone(<span class=\"string\">&quot;&quot;</span> + (<span class=\"number\">18688190000L</span> + i));</span><br><span class=\"line\">    user.setBalance(<span class=\"number\">2000</span>);</span><br><span class=\"line\">    user.setInfo(<span class=\"string\">&quot;&#123;\\&quot;age\\&quot;: 24, \\&quot;intro\\&quot;: \\&quot;英文老师\\&quot;, \\&quot;gender\\&quot;: \\&quot;female\\&quot;&#125;&quot;</span>);</span><br><span class=\"line\">    user.setCreateTime(LocalDateTime.now());</span><br><span class=\"line\">    user.setUpdateTime(user.getCreateTime());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>可以看到速度非常慢。</p>\n<p>然后再试试MybatisPlus的批处理：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testSaveBatch</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 准备10万条数据</span></span><br><span class=\"line\">    List&lt;User&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(<span class=\"number\">1000</span>);</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100000</span>; i++) &#123;</span><br><span class=\"line\">        list.add(buildUser(i));</span><br><span class=\"line\">        <span class=\"comment\">// 每1000条批量插入一次</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i % <span class=\"number\">1000</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            userService.saveBatch(list);</span><br><span class=\"line\">            list.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">e</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;耗时：&quot;</span> + (e - b));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行最终耗时如下：</p>\n<p>可以看到使用了批处理以后，比逐条新增效率提高了10倍左右，性能还是不错的。</p>\n<p>不过，我们简单查看一下<code>MybatisPlus</code>源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Transactional(rollbackFor = Exception.class)</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">saveBatch</span><span class=\"params\">(Collection&lt;T&gt; entityList, <span class=\"type\">int</span> batchSize)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">sqlStatement</span> <span class=\"operator\">=</span> getSqlStatement(SqlMethod.INSERT_ONE);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> executeBatch(entityList, batchSize, (sqlSession, entity) -&gt; sqlSession.insert(sqlStatement, entity));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...SqlHelper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;E&gt; <span class=\"type\">boolean</span> <span class=\"title function_\">executeBatch</span><span class=\"params\">(Class&lt;?&gt; entityClass, Log log, Collection&lt;E&gt; list, <span class=\"type\">int</span> batchSize, BiConsumer&lt;SqlSession, E&gt; consumer)</span> &#123;</span><br><span class=\"line\">    Assert.isFalse(batchSize &lt; <span class=\"number\">1</span>, <span class=\"string\">&quot;batchSize must not be less than one&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !CollectionUtils.isEmpty(list) &amp;&amp; executeBatch(entityClass, log, sqlSession -&gt; &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> list.size();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">idxLimit</span> <span class=\"operator\">=</span> Math.min(batchSize, size);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (E element : list) &#123;</span><br><span class=\"line\">            consumer.accept(sqlSession, element);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == idxLimit) &#123;</span><br><span class=\"line\">                sqlSession.flushStatements();</span><br><span class=\"line\">                idxLimit = Math.min(idxLimit + batchSize, size);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以发现其实<code>MybatisPlus</code>的批处理是基于<code>PrepareStatement</code>的预编译模式，然后批量提交，最终在数据库执行时还是会有多条insert语句，逐条插入数据。SQL类似这样：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Preparing: <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"keyword\">user</span> ( username, password, phone, info, balance, create_time, update_time ) <span class=\"keyword\">VALUES</span> ( ?, ?, ?, ?, ?, ?, ? )</span><br><span class=\"line\">Parameters: user_1, <span class=\"number\">123</span>, <span class=\"number\">18688190001</span>, &quot;&quot;, <span class=\"number\">2000</span>, <span class=\"number\">2023</span><span class=\"number\">-07</span><span class=\"number\">-01</span>, <span class=\"number\">2023</span><span class=\"number\">-07</span><span class=\"number\">-01</span></span><br><span class=\"line\">Parameters: user_2, <span class=\"number\">123</span>, <span class=\"number\">18688190002</span>, &quot;&quot;, <span class=\"number\">2000</span>, <span class=\"number\">2023</span><span class=\"number\">-07</span><span class=\"number\">-01</span>, <span class=\"number\">2023</span><span class=\"number\">-07</span><span class=\"number\">-01</span></span><br><span class=\"line\">Parameters: user_3, <span class=\"number\">123</span>, <span class=\"number\">18688190003</span>, &quot;&quot;, <span class=\"number\">2000</span>, <span class=\"number\">2023</span><span class=\"number\">-07</span><span class=\"number\">-01</span>, <span class=\"number\">2023</span><span class=\"number\">-07</span><span class=\"number\">-01</span></span><br></pre></td></tr></table></figure>\n\n<p>而如果想要得到最佳性能，最好是将多条SQL合并为一条，像这样：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"keyword\">user</span> ( username, password, phone, info, balance, create_time, update_time )</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> </span><br><span class=\"line\">(user_1, <span class=\"number\">123</span>, <span class=\"number\">18688190001</span>, &quot;&quot;, <span class=\"number\">2000</span>, <span class=\"number\">2023</span><span class=\"number\">-07</span><span class=\"number\">-01</span>, <span class=\"number\">2023</span><span class=\"number\">-07</span><span class=\"number\">-01</span>),</span><br><span class=\"line\">(user_2, <span class=\"number\">123</span>, <span class=\"number\">18688190002</span>, &quot;&quot;, <span class=\"number\">2000</span>, <span class=\"number\">2023</span><span class=\"number\">-07</span><span class=\"number\">-01</span>, <span class=\"number\">2023</span><span class=\"number\">-07</span><span class=\"number\">-01</span>),</span><br><span class=\"line\">(user_3, <span class=\"number\">123</span>, <span class=\"number\">18688190003</span>, &quot;&quot;, <span class=\"number\">2000</span>, <span class=\"number\">2023</span><span class=\"number\">-07</span><span class=\"number\">-01</span>, <span class=\"number\">2023</span><span class=\"number\">-07</span><span class=\"number\">-01</span>),</span><br><span class=\"line\">(user_4, <span class=\"number\">123</span>, <span class=\"number\">18688190004</span>, &quot;&quot;, <span class=\"number\">2000</span>, <span class=\"number\">2023</span><span class=\"number\">-07</span><span class=\"number\">-01</span>, <span class=\"number\">2023</span><span class=\"number\">-07</span><span class=\"number\">-01</span>);</span><br></pre></td></tr></table></figure>\n\n<p>该怎么做呢？</p>\n<p>MySQL的客户端连接参数中有这样的一个参数：<code>rewriteBatchedStatements</code>。顾名思义，就是重写批处理的<code>statement</code>语句。参考文档：</p>\n<p><a href=\"https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-connp-props-performance-extensions.html#cj-conn-prop_rewriteBatchedStatements\">https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-connp-props-performance-extensions.html#cj-conn-prop_rewriteBatchedStatements</a></p>\n<p>这个参数的默认值是false，我们需要修改连接参数，将其配置为true</p>\n<p>修改项目中的application.yml文件，在jdbc的url后面添加参数<code>&amp;rewriteBatchedStatements=true</code>:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://127.0.0.1:3306/mp?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai&amp;rewriteBatchedStatements=true</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">MySQL123</span></span><br></pre></td></tr></table></figure>\n\n<p>再次测试插入10万条数据，可以发现速度有非常明显的提升：</p>\n<p>在<code>ClientPreparedStatement</code>的<code>executeBatchInternal</code>中，有判断<code>rewriteBatchedStatements</code>值是否为true并重写SQL的功能：</p>\n<p>最终，SQL被重写了：</p>\n<h1 id=\"4-扩展功能\"><a href=\"#4-扩展功能\" class=\"headerlink\" title=\"4.扩展功能\"></a>4.扩展功能</h1><h2 id=\"4-1-代码生成\"><a href=\"#4-1-代码生成\" class=\"headerlink\" title=\"4.1.代码生成\"></a>4.1.代码生成</h2><p>在使用MybatisPlus以后，基础的<code>Mapper</code>、<code>Service</code>、<code>PO</code>代码相对固定，重复编写也比较麻烦。因此MybatisPlus官方提供了代码生成器根据数据库表结构生成<code>PO</code>、<code>Mapper</code>、<code>Service</code>等相关代码。只不过代码生成器同样要编码使用，也很麻烦。</p>\n<p>这里推荐大家使用一款<code>MybatisPlus</code>的插件，它可以基于图形化界面完成<code>MybatisPlus</code>的代码生成，非常简单。</p>\n<h3 id=\"4-1-1-安装插件\"><a href=\"#4-1-1-安装插件\" class=\"headerlink\" title=\"4.1.1.安装插件\"></a>4.1.1.安装插件</h3><p>在<code>Idea</code>的plugins市场中搜索并安装<code>MyBatisPlus</code>插件：</p>\n<p>然后重启你的Idea即可使用。</p>\n<h3 id=\"4-1-2-使用\"><a href=\"#4-1-2-使用\" class=\"headerlink\" title=\"4.1.2.使用\"></a>4.1.2.使用</h3><p>刚好数据库中还有一张address表尚未生成对应的实体和mapper等基础代码。我们利用插件生成一下。 首先需要配置数据库地址，在Idea顶部菜单中，找到<code>other</code>，选择<code>Config Database</code>：</p>\n<p>在弹出的窗口中填写数据库连接的基本信息：</p>\n<p>点击OK保存。</p>\n<p>然后再次点击Idea顶部菜单中的other，然后选择<code>Code Generator</code>:</p>\n<p>在弹出的表单中填写信息：</p>\n<p>最终，代码自动生成到指定的位置了：</p>\n<h2 id=\"4-2-静态工具\"><a href=\"#4-2-静态工具\" class=\"headerlink\" title=\"4.2.静态工具\"></a>4.2.静态工具</h2><p>有的时候Service之间也会相互调用，为了避免出现循环依赖问题，MybatisPlus提供一个静态工具类：<code>Db</code>，其中的一些静态方法与<code>IService</code>中方法签名基本一致，也可以帮助我们实现CRUD功能：</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testDbGet</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> Db.getById(<span class=\"number\">1L</span>, User.class);</span><br><span class=\"line\">    System.out.println(user);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testDbList</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 利用Db实现复杂条件查询</span></span><br><span class=\"line\">    List&lt;User&gt; list = Db.lambdaQuery(User.class)</span><br><span class=\"line\">            .like(User::getUsername, <span class=\"string\">&quot;o&quot;</span>)</span><br><span class=\"line\">            .ge(User::getBalance, <span class=\"number\">1000</span>)</span><br><span class=\"line\">            .list();</span><br><span class=\"line\">    list.forEach(System.out::println);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testDbUpdate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    Db.lambdaUpdate(User.class)</span><br><span class=\"line\">            .set(User::getBalance, <span class=\"number\">2000</span>)</span><br><span class=\"line\">            .eq(User::getUsername, <span class=\"string\">&quot;Rose&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需求：改造根据id用户查询的接口，查询用户的同时返回用户收货地址列表</p>\n<p>首先，我们要添加一个收货地址的VO对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.mp.domain.vo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.ApiModel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@ApiModel(description = &quot;收货地址VO&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AddressVO</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;id&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;用户ID&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long userId;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;省&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String province;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;市&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String city;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;县/区&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String town;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;手机&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String mobile;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;详细地址&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String street;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;联系人&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String contact;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;是否是默认 1默认 0否&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean isDefault;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;备注&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String notes;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后，改造原来的UserVO，添加一个地址属性：</p>\n<p>接下来，修改UserController中根据id查询用户的业务接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ApiOperation(&quot;根据id查询用户&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> UserVO <span class=\"title function_\">queryUserById</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Long userId)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 基于自定义service方法查询</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> userService.queryUserAndAddressById(userId);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于查询业务复杂，所以要在service层来实现。首先在IUserService中定义方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.mp.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itheima.mp.domain.po.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itheima.mp.domain.vo.UserVO;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IUserService</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">IService</span>&lt;User&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">deduct</span><span class=\"params\">(Long id, Integer money)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    UserVO <span class=\"title function_\">queryUserAndAddressById</span><span class=\"params\">(Long userId)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后，在UserServiceImpl中实现该方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> UserVO <span class=\"title function_\">queryUserAndAddressById</span><span class=\"params\">(Long userId)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.查询用户</span></span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> getById(userId);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 2.查询收货地址</span></span><br><span class=\"line\">    List&lt;Address&gt; addresses = Db.lambdaQuery(Address.class)</span><br><span class=\"line\">            .eq(Address::getUserId, userId)</span><br><span class=\"line\">            .list();</span><br><span class=\"line\">    <span class=\"comment\">// 3.处理vo</span></span><br><span class=\"line\">    <span class=\"type\">UserVO</span> <span class=\"variable\">userVO</span> <span class=\"operator\">=</span> BeanUtil.copyProperties(user, UserVO.class);</span><br><span class=\"line\">    userVO.setAddresses(BeanUtil.copyToList(addresses, AddressVO.class));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userVO;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在查询地址时，我们采用了Db的静态方法，因此避免了注入AddressService，减少了循环依赖的风险。</p>\n<p>再来实现一个功能：</p>\n<ul>\n<li>根据id批量查询用户，并查询出用户对应的所有地址</li>\n</ul>\n<h2 id=\"4-3-逻辑删除\"><a href=\"#4-3-逻辑删除\" class=\"headerlink\" title=\"4.3.逻辑删除\"></a>4.3.逻辑删除</h2><p>对于一些比较重要的数据，我们往往会采用逻辑删除的方案，即：</p>\n<ul>\n<li>在表中添加一个字段标记数据是否被删除</li>\n<li>当删除数据时把标记置为true</li>\n<li>查询时过滤掉标记为true的数据</li>\n</ul>\n<p>一旦采用了逻辑删除，所有的查询和删除逻辑都要跟着变化，非常麻烦。</p>\n<p>为了解决这个问题，MybatisPlus就添加了对逻辑删除的支持。</p>\n<p><strong>注意</strong>，只有MybatisPlus生成的SQL语句才支持自动的逻辑删除，自定义SQL需要自己手动处理逻辑删除。</p>\n<p>例如，我们给<code>address</code>表添加一个逻辑删除字段：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> address <span class=\"keyword\">add</span> deleted bit <span class=\"keyword\">default</span> b<span class=\"string\">&#x27;0&#x27;</span> <span class=\"keyword\">null</span> comment <span class=\"string\">&#x27;逻辑删除&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>然后给<code>Address</code>实体添加<code>deleted</code>字段：</p>\n<p>接下来，我们要在<code>application.yml</code>中配置逻辑删除字段：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mybatis-plus:</span></span><br><span class=\"line\">  <span class=\"attr\">global-config:</span></span><br><span class=\"line\">    <span class=\"attr\">db-config:</span></span><br><span class=\"line\">      <span class=\"attr\">logic-delete-field:</span> <span class=\"string\">deleted</span> <span class=\"comment\"># 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)</span></span><br><span class=\"line\">      <span class=\"attr\">logic-delete-value:</span> <span class=\"number\">1</span> <span class=\"comment\"># 逻辑已删除值(默认为 1)</span></span><br><span class=\"line\">      <span class=\"attr\">logic-not-delete-value:</span> <span class=\"number\">0</span> <span class=\"comment\"># 逻辑未删除值(默认为 0)</span></span><br></pre></td></tr></table></figure>\n\n<p>测试： 首先，我们执行一个删除操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testDeleteByLogic</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 删除方法与以前没有区别</span></span><br><span class=\"line\">    addressService.removeById(<span class=\"number\">59L</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法与普通删除一模一样，但是底层的SQL逻辑变了：</p>\n<p>查询一下试试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testQuery</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    List&lt;Address&gt; list = addressService.list();</span><br><span class=\"line\">    list.forEach(System.out::println);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>会发现id为59的确实没有查询出来，而且SQL中也对逻辑删除字段做了判断：</p>\n<p>综上， 开启了逻辑删除功能以后，我们就可以像普通删除一样做CRUD，基本不用考虑代码逻辑问题。还是非常方便的。</p>\n<p><strong>注意</strong>： 逻辑删除本身也有自己的问题，比如：</p>\n<ul>\n<li>会导致数据库表垃圾数据越来越多，从而影响查询效率</li>\n<li>SQL中全都需要对逻辑删除字段做判断，影响查询效率</li>\n</ul>\n<p>因此，我不太推荐采用逻辑删除功能，如果数据不能删除，可以采用把数据迁移到其它表的办法。</p>\n<h2 id=\"4-4-通用枚举\"><a href=\"#4-4-通用枚举\" class=\"headerlink\" title=\"4.4.通用枚举\"></a>4.4.通用枚举</h2><p>User类中有一个用户状态字段：</p>\n<p>像这种字段我们一般会定义一个枚举，做业务判断的时候就可以直接基于枚举做比较。但是我们数据库采用的是<code>int</code>类型，对应的PO也是<code>Integer</code>。因此业务操作时必须手动把<code>枚举</code>与<code>Integer</code>转换，非常麻烦。</p>\n<p>因此，MybatisPlus提供了一个处理枚举的类型转换器，可以帮我们<strong>把枚举类型与数据库类型自动转换</strong>。</p>\n<h3 id=\"4-4-1-定义枚举\"><a href=\"#4-4-1-定义枚举\" class=\"headerlink\" title=\"4.4.1.定义枚举\"></a>4.4.1.定义枚举</h3><p>我们定义一个用户状态的枚举：</p>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.mp.enums;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.annotation.EnumValue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Getter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">UserStatus</span> &#123;</span><br><span class=\"line\">    NORMAL(<span class=\"number\">1</span>, <span class=\"string\">&quot;正常&quot;</span>),</span><br><span class=\"line\">    FREEZE(<span class=\"number\">2</span>, <span class=\"string\">&quot;冻结&quot;</span>)</span><br><span class=\"line\">    ;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> value;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String desc;</span><br><span class=\"line\"></span><br><span class=\"line\">    UserStatus(<span class=\"type\">int</span> value, String desc) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.desc = desc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后把<code>User</code>类中的<code>status</code>字段改为<code>UserStatus</code> 类型：</p>\n<p>要让<code>MybatisPlus</code>处理枚举与数据库类型自动转换，我们必须告诉<code>MybatisPlus</code>，枚举中的哪个字段的值作为数据库值。 <code>MybatisPlus</code>提供了<code>@EnumValue</code>注解来标记枚举属性：</p>\n<h3 id=\"4-4-2-配置枚举处理器\"><a href=\"#4-4-2-配置枚举处理器\" class=\"headerlink\" title=\"4.4.2.配置枚举处理器\"></a>4.4.2.配置枚举处理器</h3><p>在application.yaml文件中添加配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mybatis-plus:</span></span><br><span class=\"line\">  <span class=\"attr\">configuration:</span></span><br><span class=\"line\">    <span class=\"attr\">default-enum-type-handler:</span> <span class=\"string\">com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-4-3-测试\"><a href=\"#4-4-3-测试\" class=\"headerlink\" title=\"4.4.3.测试\"></a>4.4.3.测试</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testService</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    List&lt;User&gt; list = userService.list();</span><br><span class=\"line\">    list.forEach(System.out::println);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最终，查询出的<code>User</code>类的<code>status</code>字段会是枚举类型：</p>\n<p>同时，为了使页面查询结果也是枚举格式，我们需要修改UserVO中的status属性：</p>\n<p>并且，在UserStatus枚举中通过<code>@JsonValue</code>注解标记JSON序列化时展示的字段：</p>\n<p>最后，在页面查询，结果如下：</p>\n<h2 id=\"4-5-JSON类型处理器\"><a href=\"#4-5-JSON类型处理器\" class=\"headerlink\" title=\"4.5.JSON类型处理器\"></a>4.5.JSON类型处理器</h2><p>数据库的user表中有一个<code>info</code>字段，是JSON类型：</p>\n<p>格式像这样：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;age&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">20</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;intro&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;佛系青年&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;gender&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;male&quot;</span><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>而目前<code>User</code>实体类中却是<code>String</code>类型：</p>\n<p>这样一来，我们要读取info中的属性时就非常不方便。如果要方便获取，info的类型最好是一个<code>Map</code>或者实体类。</p>\n<p>而一旦我们把<code>info</code>改为<code>对象</code>类型，就需要在写入数据库时手动转为<code>String</code>，再读取数据库时，手动转换为<code>对象</code>，这会非常麻烦。</p>\n<p>因此MybatisPlus提供了很多特殊类型字段的类型处理器，解决特殊字段类型与数据库类型转换的问题。例如处理JSON就可以使用<code>JacksonTypeHandler</code>处理器。</p>\n<p>接下来，我们就来看看这个处理器该如何使用。</p>\n<h3 id=\"4-5-1-定义实体\"><a href=\"#4-5-1-定义实体\" class=\"headerlink\" title=\"4.5.1.定义实体\"></a>4.5.1.定义实体</h3><p>首先，我们定义一个单独实体类来与info字段的属性匹配：</p>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.mp.domain.po;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserInfo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String intro;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String gender;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-5-2-使用类型处理器\"><a href=\"#4-5-2-使用类型处理器\" class=\"headerlink\" title=\"4.5.2.使用类型处理器\"></a>4.5.2.使用类型处理器</h3><p>接下来，将User类的info字段修改为UserInfo类型，并声明类型处理器：</p>\n<p>测试可以发现，所有数据都正确封装到UserInfo当中了：</p>\n<p>同时，为了让页面返回的结果也以对象格式返回，我们要修改UserVO中的info字段：</p>\n<p>此时，在页面查询结果如下：</p>\n<h2 id=\"4-6-配置加密（选学）\"><a href=\"#4-6-配置加密（选学）\" class=\"headerlink\" title=\"4.6.配置加密（选学）\"></a>4.6.配置加密（选学）</h2><p>目前我们配置文件中的很多参数都是明文，如果开发人员发生流动，很容易导致敏感信息的泄露。所以MybatisPlus支持配置文件的加密和解密功能。</p>\n<p>我们以数据库的用户名和密码为例。</p>\n<h3 id=\"4-6-1-生成秘钥\"><a href=\"#4-6-1-生成秘钥\" class=\"headerlink\" title=\"4.6.1.生成秘钥\"></a>4.6.1.生成秘钥</h3><p>首先，我们利用AES工具生成一个随机秘钥，然后对用户名、密码加密：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.mp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.core.toolkit.AES;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MpDemoApplicationTests</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">contextLoads</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 生成 16 位随机 AES 密钥</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">randomKey</span> <span class=\"operator\">=</span> AES.generateRandomKey();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;randomKey = &quot;</span> + randomKey);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 利用密钥对用户名加密</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> AES.encrypt(<span class=\"string\">&quot;root&quot;</span>, randomKey);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;username = &quot;</span> + username);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 利用密钥对用户名加密</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">password</span> <span class=\"operator\">=</span> AES.encrypt(<span class=\"string\">&quot;MySQL123&quot;</span>, randomKey);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;password = &quot;</span> + password);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打印结果如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">randomKey <span class=\"operator\">=</span> <span class=\"number\">6234633</span>a66fb399f</span><br><span class=\"line\">username <span class=\"operator\">=</span> px2bAbnUfiY8K<span class=\"operator\">/</span>IgsKvscg<span class=\"operator\">=</span><span class=\"operator\">=</span></span><br><span class=\"line\">password <span class=\"operator\">=</span> FGvCSEaOuga3ulDAsxw68Q<span class=\"operator\">=</span><span class=\"operator\">=</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-6-2-修改配置\"><a href=\"#4-6-2-修改配置\" class=\"headerlink\" title=\"4.6.2.修改配置\"></a>4.6.2.修改配置</h3><p>修改application.yaml文件，把jdbc的用户名、密码修改为刚刚加密生成的密文：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://127.0.0.1:3306/mp?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai&amp;rewriteBatchedStatements=true</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">mpw:QWWVnk1Oal3258x5rVhaeQ==</span> <span class=\"comment\"># 密文要以 mpw:开头</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">mpw:EUFmeH3cNAzdRGdOQcabWg==</span> <span class=\"comment\"># 密文要以 mpw:开头</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-6-3-测试\"><a href=\"#4-6-3-测试\" class=\"headerlink\" title=\"4.6.3.测试\"></a>4.6.3.测试</h3><p>在启动项目的时候，需要把刚才生成的秘钥添加到启动参数中，像这样：</p>\n<p>–mpw.key&#x3D;6234633a66fb399f</p>\n<p>单元测试的时候不能添加启动参数，所以要在测试类的注解上配置：</p>\n<p>然后随意运行一个单元测试，可以发现数据库查询正常。</p>\n<h1 id=\"5-插件功能\"><a href=\"#5-插件功能\" class=\"headerlink\" title=\"5.插件功能\"></a>5.插件功能</h1><p>MybatisPlus提供了很多的插件功能，进一步拓展其功能。目前已有的插件有：</p>\n<ul>\n<li><code>PaginationInnerInterceptor</code>：自动分页</li>\n<li><code>TenantLineInnerInterceptor</code>：多租户</li>\n<li><code>DynamicTableNameInnerInterceptor</code>：动态表名</li>\n<li><code>OptimisticLockerInnerInterceptor</code>：乐观锁</li>\n<li><code>IllegalSQLInnerInterceptor</code>：sql 性能规范</li>\n<li><code>BlockAttackInnerInterceptor</code>：防止全表更新与删除</li>\n</ul>\n<p><strong>注意：</strong> 使用多个分页插件的时候需要注意插件定义顺序，建议使用顺序如下：</p>\n<ul>\n<li>多租户,动态表名</li>\n<li>分页,乐观锁</li>\n<li>sql 性能规范,防止全表更新与删除</li>\n</ul>\n<p>这里我们以分页插件为里来学习插件的用法。</p>\n<h2 id=\"5-1-分页插件\"><a href=\"#5-1-分页插件\" class=\"headerlink\" title=\"5.1.分页插件\"></a>5.1.分页插件</h2><p>在未引入分页插件的情况下，<code>MybatisPlus</code>是不支持分页功能的，<code>IService</code>和<code>BaseMapper</code>中的分页方法都无法正常起效。 所以，我们必须配置分页插件。</p>\n<h3 id=\"5-1-1-配置分页插件\"><a href=\"#5-1-1-配置分页插件\" class=\"headerlink\" title=\"5.1.1.配置分页插件\"></a>5.1.1.配置分页插件</h3><p>在项目中新建一个配置类：</p>\n<p>其代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.mp.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MybatisConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> MybatisPlusInterceptor <span class=\"title function_\">mybatisPlusInterceptor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化核心插件</span></span><br><span class=\"line\">        <span class=\"type\">MybatisPlusInterceptor</span> <span class=\"variable\">interceptor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MybatisPlusInterceptor</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 添加分页插件</span></span><br><span class=\"line\">        interceptor.addInnerInterceptor(<span class=\"keyword\">new</span> <span class=\"title class_\">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> interceptor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-1-2-分页API\"><a href=\"#5-1-2-分页API\" class=\"headerlink\" title=\"5.1.2.分页API\"></a>5.1.2.分页API</h3><p>编写一个分页查询的测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">testPageQuery</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.分页查询，new Page()的两个参数分别是：页码、每页大小</span></span><br><span class=\"line\">    Page&lt;User&gt; p = userService.page(<span class=\"keyword\">new</span> <span class=\"title class_\">Page</span>&lt;&gt;(<span class=\"number\">2</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 2.总条数</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;total = &quot;</span> + p.getTotal());</span><br><span class=\"line\">    <span class=\"comment\">// 3.总页数</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;pages = &quot;</span> + p.getPages());</span><br><span class=\"line\">    <span class=\"comment\">// 4.数据</span></span><br><span class=\"line\">    List&lt;User&gt; records = p.getRecords();</span><br><span class=\"line\">    records.forEach(System.out::println);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行的SQL如下：</p>\n<p>这里用到了分页参数，Page，即可以支持分页参数，也可以支持排序参数。常见的API如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">pageNo</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>, pageSize = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"comment\">// 分页参数</span></span><br><span class=\"line\">Page&lt;User&gt; page = Page.of(pageNo, pageSize);</span><br><span class=\"line\"><span class=\"comment\">// 排序参数, 通过OrderItem来指定</span></span><br><span class=\"line\">page.addOrder(<span class=\"keyword\">new</span> <span class=\"title class_\">OrderItem</span>(<span class=\"string\">&quot;balance&quot;</span>, <span class=\"literal\">false</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">userService.page(page);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-2-通用分页实体\"><a href=\"#5-2-通用分页实体\" class=\"headerlink\" title=\"5.2.通用分页实体\"></a>5.2.通用分页实体</h2><p>现在要实现一个用户分页查询的接口，接口规范如下：</p>\n<table>\n<thead>\n<tr>\n<th><strong>参数</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>请求方式</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>请求路径</td>\n<td>&#x2F;users&#x2F;page</td>\n</tr>\n<tr>\n<td>请求参数</td>\n<td><code>&#123;    &quot;pageNo&quot;: 1,    &quot;pageSize&quot;: 5,    &quot;sortBy&quot;: &quot;balance&quot;,    &quot;isAsc&quot;: false,    &quot;name&quot;: &quot;o&quot;,    &quot;status&quot;: 1 &#125;</code></td>\n</tr>\n<tr>\n<td>返回值</td>\n<td><code>&#123;    &quot;total&quot;: 100006,    &quot;pages&quot;: 50003,    &quot;list&quot;: [        &#123;            &quot;id&quot;: 1685100878975279298,            &quot;username&quot;: &quot;user_9****&quot;,            &quot;info&quot;: &#123;                &quot;age&quot;: 24,                &quot;intro&quot;: &quot;英文老师&quot;,                &quot;gender&quot;: &quot;female&quot;            &#125;,            &quot;status&quot;: &quot;正常&quot;,            &quot;balance&quot;: 2000        &#125;    ] &#125;</code></td>\n</tr>\n<tr>\n<td>特殊说明</td>\n<td>如果排序字段为空，默认按照更新时间排序排序字段不为空，则按照排序字段排序</td>\n</tr>\n</tbody></table>\n<p>这里需要定义3个实体：</p>\n<ul>\n<li><code>UserQuery</code>：分页查询条件的实体，包含分页、排序参数、过滤条件</li>\n<li><code>PageDTO</code>：分页结果实体，包含总条数、总页数、当前页数据</li>\n<li><code>UserVO</code>：用户页面视图实体</li>\n</ul>\n<h3 id=\"5-2-1-实体\"><a href=\"#5-2-1-实体\" class=\"headerlink\" title=\"5.2.1.实体\"></a>5.2.1.实体</h3><p>由于UserQuery之前已经定义过了，并且其中已经包含了过滤条件，具体代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.mp.domain.query;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.ApiModel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@ApiModel(description = &quot;用户查询条件实体&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserQuery</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;用户名关键字&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;用户状态：1-正常，2-冻结&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer status;</span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;余额最小值&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer minBalance;</span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;余额最大值&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer maxBalance;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中缺少的仅仅是分页条件，而分页条件不仅仅用户分页查询需要，以后其它业务也都有分页查询的需求。因此建议将分页查询条件单独定义为一个<code>PageQuery</code>实体：</p>\n<p><code>PageQuery</code>是前端提交的查询参数，一般包含四个属性：</p>\n<ul>\n<li><code>pageNo</code>：页码</li>\n<li><code>pageSize</code>：每页数据条数</li>\n<li><code>sortBy</code>：排序字段</li>\n<li><code>isAsc</code>：是否升序</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@ApiModel(description = &quot;分页查询实体&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PageQuery</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;页码&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long pageNo;</span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;页码&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long pageSize;</span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;排序字段&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sortBy;</span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;是否升序&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean isAsc;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后，让我们的UserQuery继承这个实体：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.mp.domain.query;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.ApiModel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.EqualsAndHashCode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@EqualsAndHashCode(callSuper = true)</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@ApiModel(description = &quot;用户查询条件实体&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserQuery</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">PageQuery</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;用户名关键字&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;用户状态：1-正常，2-冻结&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer status;</span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;余额最小值&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer minBalance;</span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;余额最大值&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer maxBalance;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>返回值的用户实体沿用之前定一个<code>UserVO</code>实体：</p>\n<p>最后，则是分页实体PageDTO:</p>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.mp.domain.dto;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.ApiModel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@ApiModel(description = &quot;分页结果&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PageDTO</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;总条数&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long total;</span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;总页数&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long pages;</span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;集合&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;T&gt; list;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-2-开发接口\"><a href=\"#5-2-2-开发接口\" class=\"headerlink\" title=\"5.2.2.开发接口\"></a>5.2.2.开发接口</h3><p>我们在<code>UserController</code>中定义分页查询用户的接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.mp.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itheima.mp.domain.dto.PageDTO;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itheima.mp.domain.query.PageQuery;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itheima.mp.domain.vo.UserVO;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itheima.mp.service.UserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.RequiredArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;users&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@RequiredArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/page&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> PageDTO&lt;UserVO&gt; <span class=\"title function_\">queryUsersPage</span><span class=\"params\">(UserQuery query)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userService.queryUsersPage(query);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 。。。 略</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在<code>IUserService</code>中创建<code>queryUsersPage</code>方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PageDTO&lt;UserVO&gt; <span class=\"title function_\">queryUsersPage</span><span class=\"params\">(PageQuery query)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>接下来，在UserServiceImpl中实现该方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> PageDTO&lt;UserVO&gt; <span class=\"title function_\">queryUsersPage</span><span class=\"params\">(PageQuery query)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.构建条件</span></span><br><span class=\"line\">    <span class=\"comment\">// 1.1.分页条件</span></span><br><span class=\"line\">    Page&lt;User&gt; page = Page.of(query.getPageNo(), query.getPageSize());</span><br><span class=\"line\">    <span class=\"comment\">// 1.2.排序条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (query.getSortBy() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        page.addOrder(<span class=\"keyword\">new</span> <span class=\"title class_\">OrderItem</span>(query.getSortBy(), query.getIsAsc()));</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 默认按照更新时间排序</span></span><br><span class=\"line\">        page.addOrder(<span class=\"keyword\">new</span> <span class=\"title class_\">OrderItem</span>(<span class=\"string\">&quot;update_time&quot;</span>, <span class=\"literal\">false</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 2.查询</span></span><br><span class=\"line\">    page(page);</span><br><span class=\"line\">    <span class=\"comment\">// 3.数据非空校验</span></span><br><span class=\"line\">    List&lt;User&gt; records = page.getRecords();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (records == <span class=\"literal\">null</span> || records.size() &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 无数据，返回空结果</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PageDTO</span>&lt;&gt;(page.getTotal(), page.getPages(), Collections.emptyList());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 4.有数据，转换</span></span><br><span class=\"line\">    List&lt;UserVO&gt; list = BeanUtil.copyToList(records, UserVO.class);</span><br><span class=\"line\">    <span class=\"comment\">// 5.封装返回</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PageDTO</span>&lt;UserVO&gt;(page.getTotal(), page.getPages(), list);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动项目，在页面查看：</p>\n<h3 id=\"5-2-3-改造PageQuery实体\"><a href=\"#5-2-3-改造PageQuery实体\" class=\"headerlink\" title=\"5.2.3.改造PageQuery实体\"></a>5.2.3.改造PageQuery实体</h3><p>在刚才的代码中，从<code>PageQuery</code>到<code>MybatisPlus</code>的<code>Page</code>之间转换的过程还是比较麻烦的。</p>\n<p>我们完全可以在<code>PageQuery</code>这个实体中定义一个工具方法，简化开发。 像这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.mp.domain.query;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.core.metadata.OrderItem;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PageQuery</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer pageNo;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer pageSize;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sortBy;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean isAsc;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt;  Page&lt;T&gt; <span class=\"title function_\">toMpPage</span><span class=\"params\">(OrderItem ... orders)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.分页条件</span></span><br><span class=\"line\">        Page&lt;T&gt; p = Page.of(pageNo, pageSize);</span><br><span class=\"line\">        <span class=\"comment\">// 2.排序条件</span></span><br><span class=\"line\">        <span class=\"comment\">// 2.1.先看前端有没有传排序字段</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sortBy != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            p.addOrder(<span class=\"keyword\">new</span> <span class=\"title class_\">OrderItem</span>(sortBy, isAsc));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 2.2.再看有没有手动指定排序字段</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(orders != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            p.addOrder(orders);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; Page&lt;T&gt; <span class=\"title function_\">toMpPage</span><span class=\"params\">(String defaultSortBy, <span class=\"type\">boolean</span> isAsc)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.toMpPage(<span class=\"keyword\">new</span> <span class=\"title class_\">OrderItem</span>(defaultSortBy, isAsc));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; Page&lt;T&gt; <span class=\"title function_\">toMpPageDefaultSortByCreateTimeDesc</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> toMpPage(<span class=\"string\">&quot;create_time&quot;</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; Page&lt;T&gt; <span class=\"title function_\">toMpPageDefaultSortByUpdateTimeDesc</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> toMpPage(<span class=\"string\">&quot;update_time&quot;</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样我们在开发也时就可以省去对从<code>PageQuery</code>到<code>Page</code>的的转换：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.构建条件</span></span><br><span class=\"line\">Page&lt;User&gt; page = query.toMpPageDefaultSortByCreateTimeDesc();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-4-改造PageDTO实体\"><a href=\"#5-2-4-改造PageDTO实体\" class=\"headerlink\" title=\"5.2.4.改造PageDTO实体\"></a>5.2.4.改造PageDTO实体</h3><p>在查询出分页结果后，数据的非空校验，数据的vo转换都是模板代码，编写起来很麻烦。</p>\n<p>我们完全可以将其封装到PageDTO的工具方法中，简化整个过程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.mp.domain.dto;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.core.bean.BeanUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.AllArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.NoArgsConstructor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Function;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Collectors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PageDTO</span>&lt;V&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long total;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long pages;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;V&gt; list;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回空分页结果</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> p MybatisPlus的分页结果</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &lt;V&gt; 目标VO类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &lt;P&gt; 原始PO类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> VO的分页对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;V, P&gt; PageDTO&lt;V&gt; <span class=\"title function_\">empty</span><span class=\"params\">(Page&lt;P&gt; p)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PageDTO</span>&lt;&gt;(p.getTotal(), p.getPages(), Collections.emptyList());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将MybatisPlus分页结果转为 VO分页结果</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> p MybatisPlus的分页结果</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> voClass 目标VO类型的字节码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &lt;V&gt; 目标VO类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &lt;P&gt; 原始PO类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> VO的分页对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;V, P&gt; PageDTO&lt;V&gt; <span class=\"title function_\">of</span><span class=\"params\">(Page&lt;P&gt; p, Class&lt;V&gt; voClass)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.非空校验</span></span><br><span class=\"line\">        List&lt;P&gt; records = p.getRecords();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (records == <span class=\"literal\">null</span> || records.size() &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 无数据，返回空结果</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> empty(p);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 2.数据转换</span></span><br><span class=\"line\">        List&lt;V&gt; vos = BeanUtil.copyToList(records, voClass);</span><br><span class=\"line\">        <span class=\"comment\">// 3.封装返回</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PageDTO</span>&lt;&gt;(p.getTotal(), p.getPages(), vos);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将MybatisPlus分页结果转为 VO分页结果，允许用户自定义PO到VO的转换方式</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> p MybatisPlus的分页结果</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> convertor PO到VO的转换函数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &lt;V&gt; 目标VO类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &lt;P&gt; 原始PO类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> VO的分页对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;V, P&gt; PageDTO&lt;V&gt; <span class=\"title function_\">of</span><span class=\"params\">(Page&lt;P&gt; p, Function&lt;P, V&gt; convertor)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1.非空校验</span></span><br><span class=\"line\">        List&lt;P&gt; records = p.getRecords();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (records == <span class=\"literal\">null</span> || records.size() &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 无数据，返回空结果</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> empty(p);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 2.数据转换</span></span><br><span class=\"line\">        List&lt;V&gt; vos = records.stream().map(convertor).collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"comment\">// 3.封装返回</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PageDTO</span>&lt;&gt;(p.getTotal(), p.getPages(), vos);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最终，业务层的代码可以简化为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> PageDTO&lt;UserVO&gt; <span class=\"title function_\">queryUserByPage</span><span class=\"params\">(PageQuery query)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.构建条件</span></span><br><span class=\"line\">    Page&lt;User&gt; page = query.toMpPageDefaultSortByCreateTimeDesc();</span><br><span class=\"line\">    <span class=\"comment\">// 2.查询</span></span><br><span class=\"line\">    page(page);</span><br><span class=\"line\">    <span class=\"comment\">// 3.封装返回</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> PageDTO.of(page, UserVO.class);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果是希望自定义PO到VO的转换过程，可以这样做：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> PageDTO&lt;UserVO&gt; <span class=\"title function_\">queryUserByPage</span><span class=\"params\">(PageQuery query)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.构建条件</span></span><br><span class=\"line\">    Page&lt;User&gt; page = query.toMpPageDefaultSortByCreateTimeDesc();</span><br><span class=\"line\">    <span class=\"comment\">// 2.查询</span></span><br><span class=\"line\">    page(page);</span><br><span class=\"line\">    <span class=\"comment\">// 3.封装返回</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> PageDTO.of(page, user -&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 拷贝属性到VO</span></span><br><span class=\"line\">        <span class=\"type\">UserVO</span> <span class=\"variable\">vo</span> <span class=\"operator\">=</span> BeanUtil.copyProperties(user, UserVO.class);</span><br><span class=\"line\">        <span class=\"comment\">// 用户名脱敏</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> vo.getUsername();</span><br><span class=\"line\">        vo.setUsername(username.substring(<span class=\"number\">0</span>, username.length() - <span class=\"number\">2</span>) + <span class=\"string\">&quot;**&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> vo;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最终查询的结果如下：</p>\n","feature":true,"text":"MybatisPlus入门,它的愿景是成为 MyBatis 最好的搭档，就像魂斗罗 中的 1P、2P，基友搭配，效率翻倍。...","permalink":"/post/MybatisPlus","photos":[],"count_time":{"symbolsCount":"46k","symbolsTime":"42 mins."},"categories":[{"name":"SpringCloud","slug":"SpringCloud","count":1,"path":"api/categories/SpringCloud.json"}],"tags":[{"name":"java后端","slug":"java后端","count":1,"path":"api/tags/java后端.json"},{"name":"MybatisPlus","slug":"MybatisPlus","count":1,"path":"api/tags/MybatisPlus.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#MybatisPlus%E5%85%A5%E9%97%A8\"><span class=\"toc-text\">MybatisPlus入门</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">1. 简介</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8\"><span class=\"toc-text\">2.快速入门</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1%E5%BC%95%E5%85%A5%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">2.1引入依赖</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2%E5%AE%9A%E4%B9%89Mapper\"><span class=\"toc-text\">2.2定义Mapper</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-3%E5%B8%B8%E8%A7%81%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">2.3常见注解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-1-TableName\"><span class=\"toc-text\">2.3.1.@TableName</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-2-TableId\"><span class=\"toc-text\">2.3.2.@TableId</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-3-TableField\"><span class=\"toc-text\">2.3.3.@TableField</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-4%E5%B8%B8%E8%A7%81%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">2.4常见配置</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">3.核心功能</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-%E6%9D%A1%E4%BB%B6%E6%9E%84%E9%80%A0%E5%99%A8\"><span class=\"toc-text\">3.1.条件构造器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-1-QueryWrapper\"><span class=\"toc-text\">3.1.1.QueryWrapper</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-2-UpdateWrapper\"><span class=\"toc-text\">3.1.2.UpdateWrapper</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-3-LambdaQueryWrapper\"><span class=\"toc-text\">3.1.3.LambdaQueryWrapper</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-%E8%87%AA%E5%AE%9A%E4%B9%89SQL\"><span class=\"toc-text\">3.2.自定义SQL</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-1-%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">3.2.1.基本用法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-2-%E5%A4%9A%E8%A1%A8%E5%85%B3%E8%81%94\"><span class=\"toc-text\">3.2.2.多表关联</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-3-Service%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">3.3.Service接口</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-1-CRUD\"><span class=\"toc-text\">3.3.1.CRUD</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-2-%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">3.3.2.基本用法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-3-Lambda\"><span class=\"toc-text\">3.3.3.Lambda</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-4-%E6%89%B9%E9%87%8F%E6%96%B0%E5%A2%9E\"><span class=\"toc-text\">3.3.4.批量新增</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-%E6%89%A9%E5%B1%95%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">4.扩展功能</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-1-%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90\"><span class=\"toc-text\">4.1.代码生成</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-1-%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">4.1.1.安装插件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-2-%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">4.1.2.使用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-2-%E9%9D%99%E6%80%81%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">4.2.静态工具</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-3-%E9%80%BB%E8%BE%91%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">4.3.逻辑删除</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-4-%E9%80%9A%E7%94%A8%E6%9E%9A%E4%B8%BE\"><span class=\"toc-text\">4.4.通用枚举</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-4-1-%E5%AE%9A%E4%B9%89%E6%9E%9A%E4%B8%BE\"><span class=\"toc-text\">4.4.1.定义枚举</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-4-2-%E9%85%8D%E7%BD%AE%E6%9E%9A%E4%B8%BE%E5%A4%84%E7%90%86%E5%99%A8\"><span class=\"toc-text\">4.4.2.配置枚举处理器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-4-3-%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">4.4.3.测试</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-5-JSON%E7%B1%BB%E5%9E%8B%E5%A4%84%E7%90%86%E5%99%A8\"><span class=\"toc-text\">4.5.JSON类型处理器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-5-1-%E5%AE%9A%E4%B9%89%E5%AE%9E%E4%BD%93\"><span class=\"toc-text\">4.5.1.定义实体</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-5-2-%E4%BD%BF%E7%94%A8%E7%B1%BB%E5%9E%8B%E5%A4%84%E7%90%86%E5%99%A8\"><span class=\"toc-text\">4.5.2.使用类型处理器</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-6-%E9%85%8D%E7%BD%AE%E5%8A%A0%E5%AF%86%EF%BC%88%E9%80%89%E5%AD%A6%EF%BC%89\"><span class=\"toc-text\">4.6.配置加密（选学）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-6-1-%E7%94%9F%E6%88%90%E7%A7%98%E9%92%A5\"><span class=\"toc-text\">4.6.1.生成秘钥</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-6-2-%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">4.6.2.修改配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-6-3-%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">4.6.3.测试</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5-%E6%8F%92%E4%BB%B6%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">5.插件功能</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-1-%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">5.1.分页插件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-1-%E9%85%8D%E7%BD%AE%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">5.1.1.配置分页插件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-2-%E5%88%86%E9%A1%B5API\"><span class=\"toc-text\">5.1.2.分页API</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-2-%E9%80%9A%E7%94%A8%E5%88%86%E9%A1%B5%E5%AE%9E%E4%BD%93\"><span class=\"toc-text\">5.2.通用分页实体</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-1-%E5%AE%9E%E4%BD%93\"><span class=\"toc-text\">5.2.1.实体</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-2-%E5%BC%80%E5%8F%91%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">5.2.2.开发接口</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-3-%E6%94%B9%E9%80%A0PageQuery%E5%AE%9E%E4%BD%93\"><span class=\"toc-text\">5.2.3.改造PageQuery实体</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-4-%E6%94%B9%E9%80%A0PageDTO%E5%AE%9E%E4%BD%93\"><span class=\"toc-text\">5.2.4.改造PageDTO实体</span></a></li></ol></li></ol></li></ol>","author":{"name":"神秘奇男子","slug":"blog-author","avatar":"https://i.ibb.co/b3C0QpT/584-2022101195826670.jpg","link":"/","description":"回不去的、留不下的，对你的回忆","socials":{"github":"https://github.com/August618?tab=repositories","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/august121wsy","csdn":"https://blog.csdn.net/UPCAUG?spm=1011.2124.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/1931947622/favlist?fid=1765359122"},"Gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/wu-shanyu-AUG"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"水果分类识别优化","uid":"a1a68e61fba08a00939dcebf3ef65f10","slug":"水果分类优化","date":"2024-09-22T02:40:45.060Z","updated":"2024-09-22T03:20:28.912Z","comments":true,"path":"api/articles/水果分类优化.json","keywords":null,"cover":"https://images.pexels.com/photos/68525/soap-colorful-color-fruit-68525.jpeg?cs=srgb&dl=pexels-pixabay-68525.jpg&fm=jpg","text":"任务二：水果分类识别优化txt首先回顾一下之前的大体实现思路：先前整体思路流程 特征提取：从图像中提取两类特征（边界特征和纹理特征），用于描述水果的形状和表面纹...","permalink":"/post/水果分类优化","photos":[],"count_time":{"symbolsCount":"5.6k","symbolsTime":"5 mins."},"categories":[{"name":"深度学习","slug":"深度学习","count":1,"path":"api/categories/深度学习.json"}],"tags":[{"name":"CNN","slug":"CNN","count":1,"path":"api/tags/CNN.json"},{"name":"水果分类","slug":"水果分类","count":2,"path":"api/tags/水果分类.json"},{"name":"计算机视觉","slug":"计算机视觉","count":2,"path":"api/tags/计算机视觉.json"}],"author":{"name":"神秘奇男子","slug":"blog-author","avatar":"https://i.ibb.co/b3C0QpT/584-2022101195826670.jpg","link":"/","description":"回不去的、留不下的，对你的回忆","socials":{"github":"https://github.com/August618?tab=repositories","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/august121wsy","csdn":"https://blog.csdn.net/UPCAUG?spm=1011.2124.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/1931947622/favlist?fid=1765359122"},"Gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/wu-shanyu-AUG"}}}},"feature":true},"next_post":{"title":"Git的简单归纳","uid":"b7eae51efb7dc6d81a7837b0d6a16f52","slug":"Git简介","date":"2024-09-09T13:29:06.476Z","updated":"2024-09-09T14:24:05.228Z","comments":true,"path":"api/articles/Git简介.json","keywords":null,"cover":"https://datascientest.com/en/files/2024/03/GIT-datascientest.jpg","text":"Git的简单归纳 内容修改自github博主arkingc，持续修改补充中 一.git配置 1.配置git用户名和邮箱 二.仓库 1.创建git仓库 2.查看仓...","permalink":"/post/Git简介","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"Git","slug":"Git","count":1,"path":"api/categories/Git.json"}],"tags":[{"name":"git简介","slug":"git简介","count":1,"path":"api/tags/git简介.json"},{"name":"git简单使用","slug":"git简单使用","count":1,"path":"api/tags/git简单使用.json"}],"author":{"name":"神秘奇男子","slug":"blog-author","avatar":"https://i.ibb.co/b3C0QpT/584-2022101195826670.jpg","link":"/","description":"回不去的、留不下的，对你的回忆","socials":{"github":"https://github.com/August618?tab=repositories","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/august121wsy","csdn":"https://blog.csdn.net/UPCAUG?spm=1011.2124.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/1931947622/favlist?fid=1765359122"},"Gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/wu-shanyu-AUG"}}}},"feature":true}}